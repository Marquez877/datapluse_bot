#!/usr/bin/env python3
"""
üîß –≠–ö–°–ü–†–ï–°–°-–¢–ï–°–¢ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –î–õ–Ø –ò–ì–†–´
–ö–æ–º–∞–Ω–¥–∞ MACAN team: –≠—Ä–º–µ–∫ –û–∑–≥–æ–Ω–±–µ–∫–æ–≤, –≠–ª–¥–∏—è—Ä –ê–¥—ã–ª–±–µ–∫–æ–≤, –ö–∞–Ω—ã–∫–µ–π –ê—à—ã—Ä–∞–∫–º–∞–Ω–æ–≤–∞
"""

import requests
import os
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("TOKEN")

def test_live_game_auth():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è —É–∂–µ –∏–¥—É—â–µ–π –∏–≥—Ä—ã"""
    
    print("üéÆ –≠–ö–°–ü–†–ï–°–°-–¢–ï–°–¢ –î–õ–Ø –ò–ì–†–´")
    print("=" * 40)
    print(f"–¢–æ–∫–µ–Ω: {TOKEN[:8]}...")
    
    base_url = "https://games.datsteam.dev/api"
    
    # –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_variants = [
        # Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        ({"token": TOKEN}, {}, "Query: token"),
        ({"api_key": TOKEN}, {}, "Query: api_key"),
        ({"auth": TOKEN}, {}, "Query: auth"),
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        ({}, {"Authorization": f"Bearer {TOKEN}"}, "Header: Bearer"),
        ({}, {"Authorization": TOKEN}, "Header: –±–µ–∑ Bearer"),
        ({}, {"X-API-Key": TOKEN}, "Header: X-API-Key"),
        ({}, {"Token": TOKEN}, "Header: Token"),
        ({}, {"X-Auth-Token": TOKEN}, "Header: X-Auth-Token"),
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        ({"token": TOKEN}, {"Authorization": f"Bearer {TOKEN}"}, "Query + Header"),
    ]
    
    headers_base = {
        "Content-Type": "application/json",
        "Accept": "application/json"
    }
    
    endpoints = ["/arena", "/rounds"]
    
    for params, headers_extra, desc in auth_variants:
        print(f"\nüß™ {desc}:")
        
        headers = {**headers_base, **headers_extra}
        
        for endpoint in endpoints:
            try:
                url = f"{base_url}{endpoint}"
                response = requests.get(url, headers=headers, params=params, timeout=5)
                
                print(f"  {endpoint}: {response.status_code}", end="")
                
                if response.status_code == 200:
                    print(" ‚úÖ –£–°–ü–ï–•!")
                    data = response.json()
                    
                    if endpoint == "/arena":
                        print(f"    –ù–∞—à–∏—Ö –º—É—Ä–∞–≤—å–µ–≤: {len(data.get('ants', []))}")
                        print(f"    –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞: {data.get('nextTurnIn', 0)} —Å–µ–∫")
                        print(f"    üéØ –ù–ê–ô–î–ï–ù –†–ê–ë–û–ß–ò–ô –§–û–†–ú–ê–¢: {desc}")
                        return params, headers_extra
                    else:
                        print(f"    –†–∞—É–Ω–¥–æ–≤: {len(data.get('rounds', []))}")
                        
                elif response.status_code == 400:
                    print(f" ‚ùå –ü–ª–æ—Ö–æ–π –∑–∞–ø—Ä–æ—Å")
                    if "token" in response.text.lower():
                        print(f"    {response.text[:100]}")
                elif response.status_code == 403:
                    print(f" ‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                elif response.status_code == 401:
                    print(f" ‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                else:
                    print(f" ‚ùì {response.status_code}")
                    
            except Exception as e:
                print(f"  {endpoint}: ‚ùå {e}")
    
    return None, None

if __name__ == "__main__":
    working_params, working_headers = test_live_game_auth()
    
    if working_params is not None or working_headers:
        print(f"\nüéâ –ì–û–¢–û–í –ö –ò–ì–†–ï!")
        print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {working_params}")
        print(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {working_headers}")
    else:
        print(f"\n‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ù–ê–ô–¢–ò –†–ê–ë–û–ß–ò–ô –§–û–†–ú–ê–¢")
        print("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("- –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω")
        print("- –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        print("- –ò–≥—Ä–∞ –Ω–µ –∏–¥–µ—Ç")
