"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –±–æ–µ–≤—ã–º —Ä–∞—É–Ω–¥–∞–º
"""
import os
import sys
from config import APIclient, data
import requests

def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞"""
    print("üìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞...")
    
    if not os.path.exists('.env'):
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("   –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
        print("   TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–∑–¥–µ—Å—å")
        return False
    
    with open('.env', 'r') as f:
        content = f.read()
    
    if 'TOKEN=' not in content:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")
        return False
    
    token_line = [line for line in content.split('\n') if line.startswith('TOKEN=')]
    if token_line:
        token = token_line[0].split('=', 1)[1].strip()
        if len(token) < 10:
            print("‚ùå –¢–æ–∫–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π!")
            return False
        print(f"‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: {token[:10]}...")
        return True
    
    return False

def check_team_data():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥—ã"""
    print("\nüë• –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥—ã...")
    
    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}")
    print(f"   –£—á–∞—Å—Ç–Ω–∏–∫–∏:")
    for i, member in enumerate(data['members'], 1):
        print(f"     {i}. {member}")
    
    if data['name'] == "MACAN team" and len(data['members']) == 3:
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        return True
    else:
        print("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ config.py")
        return False

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required = ['requests', 'python-dotenv']
    missing = []
    
    for package in required:
        try:
            __import__(package.replace('-', '_'))
            print(f"   ‚úÖ {package}")
        except ImportError:
            print(f"   ‚ùå {package}")
            missing.append(package)
    
    if missing:
        print(f"\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã:")
        print(f"   pip install {' '.join(missing)}")
        return False
    
    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

def check_api_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏"""
    print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
    try:
        test_client = APIclient(use_test_server=True)
        rounds_info = test_client.get_rounds_info()
        if rounds_info:
            print("   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
            test_ok = True
        else:
            print("   ‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            test_ok = False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        test_ok = False
    
    # –ë–æ–µ–≤–æ–π —Å–µ—Ä–≤–µ—Ä
    try:
        prod_client = APIclient(use_test_server=False)
        rounds_info = prod_client.get_rounds_info()
        if rounds_info:
            print("   ‚úÖ –ë–æ–µ–≤–æ–π —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
            prod_ok = True
        else:
            print("   ‚ùå –ë–æ–µ–≤–æ–π —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            prod_ok = False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –±–æ–µ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        prod_ok = False
    
    return test_ok and prod_ok

def check_file_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤...")
    
    required_files = [
        'config.py',
        'strategy.py', 
        'main.py',
        'training.py',
        'api_test.py',
        'requirements.txt',
        '.env'
    ]
    
    missing_files = []
    for file in required_files:
        if os.path.exists(file):
            print(f"   ‚úÖ {file}")
        else:
            print(f"   ‚ùå {file}")
            missing_files.append(file)
    
    if missing_files:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        return False
    
    print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ")
    return True

def test_registration():
    """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ"""
    print("\nüìù –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ...")
    
    try:
        client = APIclient(use_test_server=True)
        result = client.register_for_round()
        
        if result:
            print("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏"""
    print("üèÜ –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –ë–û–ï–í–´–ú –†–ê–£–ù–î–ê–ú")
    print("–ö–æ–º–∞–Ω–¥–∞: MACAN team")
    print("=" * 50)
    
    checks = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤", check_file_structure),
        ("–§–∞–π–ª .env", check_env_file),
        ("–î–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", check_team_data),
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", check_dependencies),
        ("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API", check_api_connection),
        ("–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", test_registration)
    ]
    
    results = {}
    
    for check_name, check_func in checks:
        try:
            results[check_name] = check_func()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ '{check_name}': {e}")
            results[check_name] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for check_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–ê" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù–ê"
        print(f"{check_name}: {status}")
        if result:
            passed += 1
    
    success_rate = (passed / total) * 100
    print(f"\nüéØ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {passed}/{total} ({success_rate:.1f}%)")
    
    if success_rate == 100:
        print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
        print("üöÄ –ö–û–ú–ê–ù–î–ê –ì–û–¢–û–í–ê –ö –ë–û–ï–í–´–ú –†–ê–£–ù–î–ê–ú!")
        print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ –±–æ–µ–≤–æ–º —Ä–µ–∂–∏–º–µ:")
        print("   python config.py --prod")
        
    elif success_rate >= 80:
        print("\n‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ –º–æ–∂–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å")
        print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        
    else:
        print("\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´!")
        print("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ —É—á–∞—Å—Ç–∏–µ–º –≤ –±–æ–µ–≤—ã—Ö —Ä–∞—É–Ω–¥–∞—Ö")
        
    print(f"\nüìö –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ:")
    print(f"   BATTLE_GUIDE.md - –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ")
    print(f"   README.md - –û–±—â–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")

if __name__ == "__main__":
    main()
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
