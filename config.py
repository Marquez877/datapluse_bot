import os
import requests
from dotenv import load_dotenv
import random
import json 
import math
from collections import defaultdict
from typing import List, Dict, Tuple, Optional

load_dotenv()

TOKEN = os.getenv("TOKEN")
HEADERS = {"Content-Type": "application/json",
            "Accept": "application/json",
            "X-Auth-Token": TOKEN}

# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ URL –¥–ª—è API (–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è!)
BASE_URL_TEST = "https://games-test.datsteam.dev/api"  # –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
BASE_URL_PROD = "https://games.datsteam.dev/api"      # –ë–æ–µ–≤–æ–π —Å–µ—Ä–≤–µ—Ä
BASE_URL = BASE_URL_TEST  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π

data = {
    "name": "MACAN team",
    "members": [
        "–≠—Ä–º–µ–∫ –û–∑–≥–æ–Ω–±–µ–∫–æ–≤",
        "–≠–ª–¥–∏—è—Ä –ê–¥—ã–ª–±–µ–∫–æ–≤", 
        "–ö–∞–Ω—ã–∫–µ–π –ê—à—ã—Ä–∞–∫–º–∞–Ω–æ–≤–∞"
    ]
}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ç–∏–ø–æ–≤ –º—É—Ä–∞–≤—å–µ–≤
ROLE_WORKER = 0
ROLE_FIGHTER = 1
ROLE_SCOUT = 2

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ç–∏–ø–æ–≤ –≥–µ–∫—Å–æ–≤
HEX_ANTHILL = 1
HEX_EMPTY = 2
HEX_DIRT = 3
HEX_ACID = 4
HEX_STONE = 5

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ä–µ—Å—É—Ä—Å–æ–≤
RESOURCE_APPLE = 1
RESOURCE_BREAD = 2
RESOURCE_NECTAR = 3

class AdvancedStrategy:
    def __init__(self):
        self.explored_hexes = set()
        self.enemy_positions = {}
        self.resource_memory = {}
        self.turn_count = 0
        self.threat_assessment = defaultdict(int)
        
    def update_memory(self, arena_data):
        """–û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–º—è—Ç—å –æ –∫–∞—Ä—Ç–µ, –≤—Ä–∞–≥–∞—Ö –∏ —Ä–µ—Å—É—Ä—Å–∞—Ö"""
        self.turn_count += 1
        
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã–µ –≥–µ–∫—Å—ã
        for hex_info in arena_data.get('map', []):
            self.explored_hexes.add((hex_info['q'], hex_info['r']))
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–∞–≥–∞—Ö
        for enemy in arena_data.get('enemies', []):
            pos = (enemy['q'], enemy['r'])
            self.enemy_positions[pos] = {
                'type': enemy['type'],
                'health': enemy['health'],
                'turn': self.turn_count
            }
            
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        for food in arena_data.get('food', []):
            pos = (food['q'], food['r'])
            self.resource_memory[pos] = {
                'type': food['type'],
                'amount': food['amount'],
                'turn': self.turn_count
            }
            
    def hex_distance(self, pos1: Tuple[int, int], pos2: Tuple[int, int]) -> int:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –≥–µ–∫—Å–∞–º–∏"""
        q1, r1 = pos1
        q2, r2 = pos2
        return (abs(q1 - q2) + abs(q1 + r1 - q2 - r2) + abs(r1 - r2)) // 2
        
    def assess_threat_level(self, pos, arena_data):
        """–û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è —É–≥—Ä–æ–∑—ã –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏"""
        threat = 0
        enemies = arena_data.get('enemies', [])
        
        for enemy in enemies:
            enemy_pos = (enemy['q'], enemy['r'])
            distance = self.hex_distance(pos, enemy_pos)
            
            if enemy['type'] == ROLE_FIGHTER and distance <= 2:
                threat += 70 / (distance + 1)
            elif enemy['type'] == ROLE_SCOUT and distance <= 4:
                threat += 20 / (distance + 1)
            elif enemy['type'] == ROLE_WORKER and distance <= 1:
                threat += 30 / (distance + 1)
                
        return threat
        
    def find_safe_exploration_targets(self, ant, arena_data):
        """–ù–∞—Ö–æ–¥–∏–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ü–µ–ª–∏ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
        ant_pos = (ant['q'], ant['r'])
        candidates = []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏ –≤ —Ä–∞–¥–∏—É—Å–µ –¥–≤–∏–∂–µ–Ω–∏—è
        for radius in range(1, ant['type'] == ROLE_SCOUT and 8 or 6):
            for q in range(-radius, radius + 1):
                for r in range(-radius, radius + 1):
                    if abs(q + r) <= radius:
                        target = (ant_pos[0] + q, ant_pos[1] + r)
                        if target not in self.explored_hexes:
                            threat = self.assess_threat_level(target, arena_data)
                            distance = self.hex_distance(ant_pos, target)
                            score = radius * 10 - threat - distance
                            candidates.append((target, score))
                            
        candidates.sort(key=lambda x: x[1], reverse=True)
        return candidates[:5] if candidates else []

class APIclient:
    def __init__(self, use_test_server=True):
        self.token = TOKEN
        self.headers = HEADERS
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        if use_test_server:
            self.base_url = BASE_URL_TEST
            print("üß™ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¢–ï–°–¢–û–í–´–ô —Å–µ—Ä–≤–µ—Ä")
        else:
            self.base_url = BASE_URL_PROD
            print("‚öîÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ë–û–ï–í–û–ô —Å–µ—Ä–≤–µ—Ä")
            
        self.strategy = AdvancedStrategy()
        self.request_count = 0  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–∞ 3 RPS
        self.last_request_time = 0
        
    def _rate_limit_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (3 RPS)"""
        import time
        current_time = time.time()
        if current_time - self.last_request_time < 0.34:  # ~1/3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(0.34 - (current_time - self.last_request_time))
        self.last_request_time = time.time()
        
    def get_arena(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—Ä–µ–Ω—ã"""
        self._rate_limit_check()
        try:
            response = requests.get(f"{self.base_url}/arena", headers=self.headers)
            response.raise_for_status()
            data = response.json()
            self.strategy.update_memory(data)
            return data
        except requests.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞—Ä–µ–Ω—ã: {e}")
            return None

    def send_move(self, moves):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–≤–∏–∂–µ–Ω–∏—è"""
        self._rate_limit_check()
        try:
            response = requests.post(f"{self.base_url}/move", headers=self.headers, json={"moves": moves})
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥: {e}")
            return None
            
    def register_for_round(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ä–∞—É–Ω–¥"""
        self._rate_limit_check()
        try:
            response = requests.post(f"{self.base_url}/register", headers=self.headers, json=data)
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            return None
    
    def get_logs(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏–π"""
        self._rate_limit_check()
        try:
            response = requests.get(f"{self.base_url}/logs", headers=self.headers)
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")
            return None
    
    def get_rounds_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—É–Ω–¥–∞—Ö"""
        self._rate_limit_check()
        try:
            response = requests.get(f"{self.base_url}/rounds", headers=self.headers)
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—É–Ω–¥–∞—Ö: {e}")
            return None

    def validate_move_path(self, ant: Dict, path: List[Dict], arena_data: Dict) -> List[Dict]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º –∏–≥—Ä—ã"""
        if not path or len(path) < 2:
            return path
            
        ant_type = ant['type']
        max_movement_points = {ROLE_WORKER: 5, ROLE_FIGHTER: 4, ROLE_SCOUT: 7}.get(ant_type, 5)
        
        validated_path = [path[0]]  # –°—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
        movement_spent = 0
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è
        hex_costs = {}
        for hex_info in arena_data.get('map', []):
            pos = (hex_info['q'], hex_info['r'])
            cost = hex_info.get('cost', 1)
            if hex_info['type'] == HEX_STONE:
                cost = float('inf')  # –ù–µ–ø—Ä–æ—Ö–æ–¥–∏–º—ã–π
            hex_costs[pos] = cost
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —à–∞–≥ –ø—É—Ç–∏
        for i in range(1, len(path)):
            current_pos = (path[i-1]['q'], path[i-1]['r'])
            next_pos = (path[i]['q'], path[i]['r'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–µ–∫—Å—ã —Å–æ—Å–µ–¥–Ω–∏–µ
            if next_pos not in self.get_neighbors(*current_pos):
                print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ—Å–æ—Å–µ–¥–Ω–∏–µ –≥–µ–∫—Å—ã –≤ –ø—É—Ç–∏ –º—É—Ä–∞–≤—å—è {ant['id']}")
                break
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è
            move_cost = hex_costs.get(next_pos, 1)
            if move_cost == float('inf'):
                print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –Ω–µ–ø—Ä–æ—Ö–æ–¥–∏–º—ã–π –≥–µ–∫—Å")
                break
                
            if movement_spent + move_cost > max_movement_points:
                print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –æ—á–∫–æ–≤ –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è –º—É—Ä–∞–≤—å—è {ant['id']}")
                break
                
            validated_path.append(path[i])
            movement_spent += move_cost
            
        return validated_path
    
    def check_collision_avoidance(self, moves: List[Dict], arena_data: Dict) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∫–æ–ª–ª–∏–∑–∏–π –º–µ–∂–¥—É –Ω–∞—à–∏–º–∏ –º—É—Ä–∞–≤—å—è–º–∏"""
        our_ants = {ant['id']: ant for ant in arena_data.get('ants', [])}
        final_positions = {}
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–∂–¥–æ–≥–æ –º—É—Ä–∞–≤—å—è
        for move in moves:
            ant_id = move['ant']
            ant = our_ants.get(ant_id)
            if not ant:
                continue
                
            if move['path']:
                final_pos = (move['path'][-1]['q'], move['path'][-1]['r'])
            else:
                final_pos = (ant['q'], ant['r'])
                
            final_positions[ant_id] = final_pos
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã (–º—É—Ä–∞–≤—å–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞ –æ–¥–Ω–æ–º –≥–µ–∫—Å–µ)
        type_positions = defaultdict(list)
        for ant_id, pos in final_positions.items():
            ant = our_ants.get(ant_id)
            if ant:
                type_positions[ant['type']].append((ant_id, pos))
        
        # –£—Å—Ç—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
        cleaned_moves = []
        for move in moves:
            ant_id = move['ant']
            ant = our_ants.get(ant_id)
            if not ant:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å –¥—Ä—É–≥–∏–º–∏ –º—É—Ä–∞–≤—å—è–º–∏ —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞
            final_pos = final_positions[ant_id]
            same_type_ants = type_positions[ant['type']]
            
            conflict = False
            for other_ant_id, other_pos in same_type_ants:
                if other_ant_id != ant_id and other_pos == final_pos:
                    conflict = True
                    break
            
            if not conflict:
                cleaned_moves.append(move)
            else:
                print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –∫–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –º—É—Ä–∞–≤—å—è {ant_id}, –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                
        return cleaned_moves

    @staticmethod
    def hex_distance(pos1: Tuple[int, int], pos2: Tuple[int, int]) -> int:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –≥–µ–∫—Å–∞–º–∏"""
        q1, r1 = pos1
        q2, r2 = pos2
        return (abs(q1 - q2) + abs(q1 + r1 - q2 - r2) + abs(r1 - r2)) // 2

    @staticmethod
    def get_neighbors(q: int, r: int) -> List[Tuple[int, int]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å–µ–¥–Ω–∏—Ö –≥–µ–∫—Å–æ–≤"""
        directions = [(+1, 0), (+1, -1), (0, -1), (-1, 0), (-1, +1), (0, +1)]
        return [(q + dq, r + dr) for dq, dr in directions]

    def find_path_astar(self, start: Tuple[int, int], goal: Tuple[int, int], 
                       arena_data: Dict, max_cost: int = 20) -> List[Dict]:
        """A* –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏"""
        from heapq import heappush, heappop
        
        open_set = [(0, start, [])]
        closed_set = set()
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–µ–∫—Å–æ–≤
        hex_costs = {}
        for hex_info in arena_data.get('map', []):
            pos = (hex_info['q'], hex_info['r'])
            if hex_info['type'] == HEX_STONE:
                continue  # –ù–µ–ø—Ä–æ—Ö–æ–¥–∏–º—ã–π
            elif hex_info['type'] == HEX_ACID:
                hex_costs[pos] = 3  # –ò–∑–±–µ–≥–∞–µ–º –∫–∏—Å–ª–æ—Ç—É
            elif hex_info['type'] == HEX_DIRT:
                hex_costs[pos] = 2
            else:
                hex_costs[pos] = 1
                
        while open_set:
            f_cost, current, path = heappop(open_set)
            
            if current == goal:
                return [{'q': q, 'r': r} for q, r in [start] + path]
                
            if current in closed_set:
                continue
                
            closed_set.add(current)
            
            for neighbor in self.get_neighbors(*current):
                if neighbor in closed_set:
                    continue
                    
                move_cost = hex_costs.get(neighbor, 1)
                if move_cost > max_cost:
                    continue
                    
                new_path = path + [neighbor]
                g_cost = len(new_path)
                h_cost = self.hex_distance(neighbor, goal)
                f_cost = g_cost + h_cost
                
                heappush(open_set, (f_cost, neighbor, new_path))
                
        return [{'q': start[0], 'r': start[1]}]  # –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ –º–µ—Å—Ç–µ

    def get_optimal_resource_target(self, ant: Dict, visible_food: List[Dict], 
                                   home_coords: List[Dict]) -> Optional[Tuple[int, int]]:
        """–í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è —Å–±–æ—Ä–∞"""
        if not visible_food:
            return None
            
        ant_pos = (ant['q'], ant['r'])
        scored_resources = []
        
        for food in visible_food:
            food_pos = (food['q'], food['r'])
            distance = self.hex_distance(ant_pos, food_pos)
            
            # –û—Ü–µ–Ω–∫–∞ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å–∞
            value_multiplier = {
                RESOURCE_NECTAR: 6,
                RESOURCE_BREAD: 2,
                RESOURCE_APPLE: 1
            }.get(food['type'], 1)
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –¥–æ–º–∞
            home_distance = min(self.hex_distance(food_pos, (h['q'], h['r'])) 
                               for h in home_coords)
            
            score = (food['amount'] * value_multiplier) / (distance + 1) - home_distance * 0.1
            scored_resources.append((food_pos, score))
            
        scored_resources.sort(key=lambda x: x[1], reverse=True)
        return scored_resources[0][0] if scored_resources else None

    def plan_worker_move(self, ant: Dict, visible_food: List[Dict], 
                        home_coords: List[Dict], arena_data: Dict) -> List[Dict]:
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        ant_pos = (ant['q'], ant['r'])
        spot = arena_data.get('spot', {})
        main_hex = (spot.get('q', 0), spot.get('r', 0))
        
        # –í–ê–ñ–ù–û: –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≥–µ–∫—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –º—É—Ä–∞–≤—å–µ–≤
        if ant_pos == main_hex:
            # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Å–≤–æ–±–æ–¥–Ω—ã–π –≥–µ–∫—Å —Ä—è–¥–æ–º —Å –º—É—Ä–∞–≤–µ–π–Ω–∏–∫–æ–º
            for home in home_coords:
                home_pos = (home['q'], home['r'])
                if home_pos != main_hex:
                    return self.find_path_astar(ant_pos, home_pos, arena_data)
            
            # –ï—Å–ª–∏ –≤—Å–µ –≥–µ–∫—Å—ã –º—É—Ä–∞–≤–µ–π–Ω–∏–∫–∞ –∑–∞–Ω—è—Ç—ã, –æ—Ç—Ö–æ–¥–∏–º –Ω–∞ 1 –≥–µ–∫—Å
            neighbors = self.get_neighbors(*ant_pos)
            if neighbors:
                return self.find_path_astar(ant_pos, neighbors[0], arena_data)
        
        # –ï—Å–ª–∏ –Ω–µ—Å–µ–º —Ä–µ—Å—É—Ä—Å—ã, –∏–¥–µ–º –¥–æ–º–æ–π
        if ant.get('food') and ant['food'].get('amount', 0) > 0:
            # –í—ã–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–π –≥–µ–∫—Å –º—É—Ä–∞–≤–µ–π–Ω–∏–∫–∞
            closest_home = min(home_coords, 
                             key=lambda h: self.hex_distance(ant_pos, (h['q'], h['r'])))
            target = (closest_home['q'], closest_home['r'])
            return self.find_path_astar(ant_pos, target, arena_data)
            
        # –ò—â–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–µ—Å—É—Ä—Å
        target_pos = self.get_optimal_resource_target(ant, visible_food, home_coords)
        if target_pos:
            return self.find_path_astar(ant_pos, target_pos, arena_data)
            
        # –ò—Å—Å–ª–µ–¥—É–µ–º —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é —Ä—è–¥–æ–º —Å –¥–æ–º–æ–º
        home_center = home_coords[0] if home_coords else {'q': 0, 'r': 0}
        exploration_targets = self.strategy.find_safe_exploration_targets(ant, arena_data)
        
        if exploration_targets:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ü–µ–ª–∏ —Ä—è–¥–æ–º —Å –¥–æ–º–æ–º
            nearby_targets = [target for target, score in exploration_targets 
                            if self.hex_distance(target, (home_center['q'], home_center['r'])) <= 8]
            if nearby_targets:
                return self.find_path_astar(ant_pos, nearby_targets[0], arena_data)
                
        return [{'q': ant['q'], 'r': ant['r']}]

    def calculate_combat_effectiveness(self, attacker: Dict, target_pos: Tuple[int, int], 
                                     arena_data: Dict, our_ants: List[Dict]) -> float:
        """–†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏ —Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–æ–≤"""
        base_damage = {ROLE_WORKER: 30, ROLE_FIGHTER: 70, ROLE_SCOUT: 20}.get(attacker['type'], 30)
        attacker_pos = (attacker['q'], attacker['r'])
        
        # –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω
        damage = base_damage
        
        # –ë–æ–Ω—É—Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (50% –µ—Å–ª–∏ —Ä—è–¥–æ–º —Å–æ—é–∑–Ω–∏–∫)
        support_bonus = 0
        for ally in our_ants:
            if ally['id'] == attacker['id']:
                continue
            ally_pos = (ally['q'], ally['r'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—é–∑–Ω–∏–∫ —Ä—è–¥–æ–º —Å –∞—Ç–∞–∫—É—é—â–∏–º –ò —Ü–µ–ª—å—é
            if (self.hex_distance(ally_pos, attacker_pos) <= 1 and 
                self.hex_distance(ally_pos, target_pos) <= 1 and
                ally_pos != attacker_pos):  # –ù–µ –Ω–∞ –æ–¥–Ω–æ–º –≥–µ–∫—Å–µ
                support_bonus = 0.5
                break
        
        # –ë–æ–Ω—É—Å –º—É—Ä–∞–≤–µ–π–Ω–∏–∫–∞ (25% –µ—Å–ª–∏ –≤ —Ä–∞–¥–∏—É—Å–µ 2 –æ—Ç –¥–æ–º–∞)
        anthill_bonus = 0
        home_coords = arena_data.get('home', [])
        for home in home_coords:
            home_pos = (home['q'], home['r'])
            if self.hex_distance(attacker_pos, home_pos) <= 2:
                anthill_bonus = 0.25
                break
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã
        total_multiplier = 1.0 + support_bonus + anthill_bonus
        final_damage = damage * total_multiplier
        
        return final_damage
        
    def should_attack_position(self, attacker: Dict, target_pos: Tuple[int, int], 
                              arena_data: Dict, our_ants: List[Dict]) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –∞—Ç–∞–∫–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ä–∞–≥ –Ω–∞ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
        enemies = arena_data.get('enemies', [])
        target_enemy = None
        
        for enemy in enemies:
            if (enemy['q'], enemy['r']) == target_pos:
                target_enemy = enemy
                break
                
        if not target_enemy:
            return False
            
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—à —É—Ä–æ–Ω
        our_damage = self.calculate_combat_effectiveness(attacker, target_pos, arena_data, our_ants)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–Ω –≤—Ä–∞–≥–∞ (–µ—Å–ª–∏ –æ–Ω —Å–º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç)
        enemy_damage = {ROLE_WORKER: 30, ROLE_FIGHTER: 70, ROLE_SCOUT: 20}.get(target_enemy['type'], 30)
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
        our_health = attacker['health']
        enemy_health = target_enemy['health']
        
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –∞—Ç–∞–∫—É–µ–º –µ—Å–ª–∏ –º–æ–∂–µ–º —É–±–∏—Ç—å –∑–∞ 1-2 —Ö–æ–¥–∞ –∏–ª–∏ —É –Ω–∞—Å –±–æ–ª—å—à–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ
        turns_to_kill_enemy = max(1, enemy_health // our_damage)
        turns_to_kill_us = max(1, our_health // enemy_damage) if enemy_damage > 0 else float('inf')
        
        return turns_to_kill_enemy <= turns_to_kill_us or our_damage > enemy_health

    def plan_fighter_move(self, ant: Dict, visible_enemies: List[Dict], 
                         arena_data: Dict, our_ants: List[Dict]) -> List[Dict]:
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –±–æ–π—Ü–∞ —Å —Ç–∞–∫—Ç–∏–∫–æ–π"""
        ant_pos = (ant['q'], ant['r'])
        spot = arena_data.get('spot', {})
        main_hex = (spot.get('q', 0), spot.get('r', 0))
        home_coords = arena_data.get('home', [])
        
        # –í–ê–ñ–ù–û: –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≥–µ–∫—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –º—É—Ä–∞–≤—å–µ–≤
        if ant_pos == main_hex:
            # –û—Ç—Ö–æ–¥–∏–º –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –≥–µ–∫—Å –¥–ª—è –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            neighbors = self.get_neighbors(*ant_pos)
            if neighbors:
                return self.find_path_astar(ant_pos, neighbors[0], arena_data)
        
        if not visible_enemies:
            # –ü–∞—Ç—Ä—É–ª–∏—Ä—É–µ–º —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é
            patrol_targets = self.strategy.find_safe_exploration_targets(ant, arena_data)
            if patrol_targets:
                return self.find_path_astar(ant_pos, patrol_targets[0][0], arena_data)
            return [{'q': ant['q'], 'r': ant['r']}]
            
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ–∑–∏—Ä—É–µ–º —Ü–µ–ª–∏
        priority_targets = []
        for enemy in visible_enemies:
            enemy_pos = (enemy['q'], enemy['r'])
            distance = self.hex_distance(ant_pos, enemy_pos)
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Ä–∞–±–æ—á–∏–µ > —Ä–∞–∑–≤–µ–¥—á–∏–∫–∏ > –±–æ–π—Ü—ã
            priority = {ROLE_WORKER: 3, ROLE_SCOUT: 2, ROLE_FIGHTER: 1}.get(enemy['type'], 1)
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –≤—Ä–∞–≥–∞
            health_factor = 200 / (enemy['health'] + 1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–æ—é–∑–Ω–∏–∫–æ–≤
            support = sum(1 for ally in our_ants 
                         if ally['type'] == ROLE_FIGHTER and 
                         self.hex_distance((ally['q'], ally['r']), enemy_pos) <= 2)
            
            score = priority * health_factor + support * 0.5 - distance * 0.1
            priority_targets.append((enemy_pos, score))
            
        priority_targets.sort(key=lambda x: x[1], reverse=True)
        target_pos = priority_targets[0][0]
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–∫—Ä—É–∂–∏—Ç—å —Ü–µ–ª—å
        neighbors = self.get_neighbors(*target_pos)
        best_attack_pos = min(neighbors, 
                             key=lambda pos: self.hex_distance(ant_pos, pos))
        
        return self.find_path_astar(ant_pos, best_attack_pos, arena_data)

    def plan_scout_move(self, ant: Dict, arena_data: Dict) -> List[Dict]:
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ä–∞–∑–≤–µ–¥—á–∏–∫–∞"""
        ant_pos = (ant['q'], ant['r'])
        spot = arena_data.get('spot', {})
        main_hex = (spot.get('q', 0), spot.get('r', 0))
        
        # –í–ê–ñ–ù–û: –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≥–µ–∫—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –º—É—Ä–∞–≤—å–µ–≤
        if ant_pos == main_hex:
            # –û—Ç—Ö–æ–¥–∏–º –¥–ª—è —Ä–∞–∑–≤–µ–¥–∫–∏
            exploration_targets = self.strategy.find_safe_exploration_targets(ant, arena_data)
            if exploration_targets:
                return self.find_path_astar(ant_pos, exploration_targets[0][0], arena_data)
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–≤–µ–¥–∫–∏, –æ—Ç—Ö–æ–¥–∏–º –Ω–∞ —Å–æ—Å–µ–¥–Ω–∏–π –≥–µ–∫—Å
            neighbors = self.get_neighbors(*ant_pos)
            if neighbors:
                return self.find_path_astar(ant_pos, neighbors[0], arena_data)
        
        # –ò—â–µ–º –Ω–µ–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
        exploration_targets = self.strategy.find_safe_exploration_targets(ant, arena_data)
        
        if exploration_targets:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—É—é –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—É—é —Ü–µ–ª—å
            target_pos = exploration_targets[0][0]
            return self.find_path_astar(ant_pos, target_pos, arena_data)
            
        # –ï—Å–ª–∏ –≤—Å–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–æ, –ø–∞—Ç—Ä—É–ª–∏—Ä—É–µ–º –ø–µ—Ä–∏–º–µ—Ç—Ä
        home_coords = arena_data.get('home', [])
        if home_coords:
            home_center = home_coords[0]
            # –î–≤–∏–∂–µ–º—Å—è –ø–æ –∫—Ä—É–≥—É –≤–æ–∫—Ä—É–≥ –±–∞–∑—ã
            angle = (self.strategy.turn_count * 0.5) % (2 * math.pi)
            radius = 10
            target_q = int(home_center['q'] + radius * math.cos(angle))
            target_r = int(home_center['r'] + radius * math.sin(angle))
            return self.find_path_astar(ant_pos, (target_q, target_r), arena_data)
            
        return [{'q': ant['q'], 'r': ant['r']}]

    def execute_turn(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ö–æ–¥–∞ —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        arena_data = self.get_arena()
        if not arena_data:
            return False
            
        moves = []
        our_ants = arena_data.get('ants', [])
        visible_enemies = arena_data.get('enemies', [])
        visible_food = arena_data.get('food', [])
        home_coords = arena_data.get('home', [])
        
        print(f"\n=== –•–û–î {self.strategy.turn_count} ===")
        print(f"–ù–∞—à–∏—Ö –º—É—Ä–∞–≤—å–µ–≤: {len(our_ants)}")
        print(f"–í–∏–¥–∏–º—ã—Ö –≤—Ä–∞–≥–æ–≤: {len(visible_enemies)}")
        print(f"–í–∏–¥–∏–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤: {len(visible_food)}")
        print(f"–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: {arena_data.get('score', 0)}")
        
        for ant in our_ants:
            ant_type = ant['type']
            ant_type_name = {ROLE_WORKER: '–†–∞–±–æ—á–∏–π', ROLE_FIGHTER: '–ë–æ–µ—Ü', ROLE_SCOUT: '–†–∞–∑–≤–µ–¥—á–∏–∫'}.get(ant_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            
            try:
                if ant_type == ROLE_WORKER:
                    path = self.plan_worker_move(ant, visible_food, home_coords, arena_data)
                elif ant_type == ROLE_FIGHTER:
                    path = self.plan_fighter_move(ant, visible_enemies, arena_data, our_ants)
                elif ant_type == ROLE_SCOUT:
                    path = self.plan_scout_move(ant, arena_data)
                else:
                    path = [{'q': ant['q'], 'r': ant['r']}]
                
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø—É—Ç—å
                validated_path = self.validate_move_path(ant, path, arena_data)
                
                if len(validated_path) > 1:  # –ï—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ
                    moves.append({
                        "ant": ant['id'],
                        "path": validated_path[1:]  # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
                    })
                    print(f"{ant_type_name} {ant['id'][:8]}: –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞ {len(validated_path)-1} —à–∞–≥–æ–≤")
                else:
                    print(f"{ant_type_name} {ant['id'][:8]}: –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ")
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {ant_type_name} {ant['id'][:8]}: {e}")
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ –º–µ–∂–¥—É –Ω–∞—à–∏–º–∏ –º—É—Ä–∞–≤—å—è–º–∏
        moves = self.check_collision_avoidance(moves, arena_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã
        if moves:
            result = self.send_move(moves)
            if result is None:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥")
                return False
            else:
                print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(moves)} –∫–æ–º–∞–Ω–¥")
        else:
            print("‚ÑπÔ∏è –ù–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            
        print(f"–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞: {arena_data.get('nextTurnIn', 0):.1f} —Å–µ–∫")
        print("=" * 40)
        
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    import sys
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    use_test_server = True
    if len(sys.argv) > 1 and sys.argv[1] == "--prod":
        use_test_server = False
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–ø—É—Å–∫ –Ω–∞ –ë–û–ï–í–û–ú —Å–µ—Ä–≤–µ—Ä–µ!")
        confirm = input("–í–≤–µ–¥–∏—Ç–µ 'YES' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ")
        if confirm != 'YES':
            print("–ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω")
            return
    
    client = APIclient(use_test_server=use_test_server)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è –Ω–∞ —Ä–∞—É–Ω–¥
    print("üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è –Ω–∞ —Ä–∞—É–Ω–¥...")
    registration_result = client.register_for_round()
    if registration_result:
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Ä–∞—É–Ω–¥!")
        print(f"–ö–æ–º–∞–Ω–¥–∞: {data['name']}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
        return
        
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    try:
        print("üéÆ –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É...")
        while True:
            arena_data = client.get_arena()
            if arena_data and arena_data.get('nextTurnIn', 0) > 0:
                client.execute_turn()
                import time
                time.sleep(2)  # –ñ–¥–µ–º –º–µ–∂–¥—É —Ö–æ–¥–∞–º–∏
            else:
                print("üèÅ –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                break
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()