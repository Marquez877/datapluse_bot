"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–≥—Ä—ã
–ö–æ–º–∞–Ω–¥–∞ MACAN team:
- –≠—Ä–º–µ–∫ –û–∑–≥–æ–Ω–±–µ–∫–æ–≤  
- –≠–ª–¥–∏—è—Ä –ê–¥—ã–ª–±–µ–∫–æ–≤
- –ö–∞–Ω—ã–∫–µ–π –ê—à—ã—Ä–∞–∫–º–∞–Ω–æ–≤–∞
"""
import json
import time
from datetime import datetime
from config import APIclient

class GameAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–≥—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    
    def __init__(self):
        self.game_log = []
        self.turn_data = {}
        
    def log_turn(self, turn_number: int, arena_data: dict, moves: list, strategy: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ö–æ–¥–∞"""
        turn_info = {
            'turn': turn_number,
            'timestamp': datetime.now().isoformat(),
            'strategy': strategy,
            'score': arena_data.get('score', 0),
            'ants_count': len(arena_data.get('ants', [])),
            'enemies_count': len(arena_data.get('enemies', [])),
            'food_count': len(arena_data.get('food', [])),
            'moves_sent': len(moves),
            'next_turn_in': arena_data.get('nextTurnIn', 0)
        }
        
        self.game_log.append(turn_info)
        self.turn_data[turn_number] = {
            'arena': arena_data,
            'moves': moves,
            'info': turn_info
        }
    
    def save_game_log(self, filename: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–∞ –∏–≥—Ä—ã –≤ —Ñ–∞–π–ª"""
        if filename is None:
            filename = f"game_log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(self.game_log, f, indent=2, ensure_ascii=False)
            
        print(f"–õ–æ–≥ –∏–≥—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
    
    def print_statistics(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä—ã"""
        if not self.game_log:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
            
        print("\n" + "="*60)
        print("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ì–†–´")
        print("="*60)
        
        total_turns = len(self.game_log)
        final_score = self.game_log[-1]['score'] if self.game_log else 0
        max_ants = max(turn['ants_count'] for turn in self.game_log)
        total_moves = sum(turn['moves_sent'] for turn in self.game_log)
        
        print(f"–í—Å–µ–≥–æ —Ö–æ–¥–æ–≤: {total_turns}")
        print(f"–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç: {final_score}")
        print(f"–ú–∞–∫—Å–∏–º—É–º –º—É—Ä–∞–≤—å–µ–≤: {max_ants}")
        print(f"–í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_moves}")
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        strategies = {}
        for turn in self.game_log:
            strategy = turn['strategy']
            strategies[strategy] = strategies.get(strategy, 0) + 1
            
        print(f"\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:")
        for strategy, count in strategies.items():
            percentage = (count / total_turns) * 100
            print(f"  {strategy}: {count} —Ö–æ–¥–æ–≤ ({percentage:.1f}%)")
        
        # –î–∏–Ω–∞–º–∏–∫–∞ —Å—á–µ—Ç–∞
        if total_turns > 1:
            score_growth = final_score - self.game_log[0]['score']
            avg_growth = score_growth / total_turns if total_turns > 0 else 0
            print(f"\n–†–æ—Å—Ç —Å—á–µ—Ç–∞: {score_growth} (+{avg_growth:.2f} –∑–∞ —Ö–æ–¥)")
        
        print("="*60)

class DebugClient(APIclient):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è API –∫–ª–∏–µ–Ω—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""
    
    def __init__(self, debug_mode: bool = True):
        super().__init__()
        self.debug_mode = debug_mode
        self.analyzer = GameAnalyzer()
        
    def get_arena_debug(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞—Ä–µ–Ω—ã —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        data = self.get_arena()
        if data and self.debug_mode:
            print(f"\nüîç –û–¢–õ–ê–î–ö–ê - –•–æ–¥ {data.get('turnNo', 'N/A')}")
            print(f"‚è∞ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞: {data.get('nextTurnIn', 0):.1f}—Å")
            print(f"üèÜ –°—á–µ—Ç: {data.get('score', 0)}")
            print(f"üêú –ù–∞—à–∏—Ö –º—É—Ä–∞–≤—å–µ–≤: {len(data.get('ants', []))}")
            print(f"üëπ –í—Ä–∞–≥–æ–≤ –≤–∏–¥–Ω–æ: {len(data.get('enemies', []))}")
            print(f"üçé –†–µ—Å—É—Ä—Å–æ–≤ –≤–∏–¥–Ω–æ: {len(data.get('food', []))}")
            print(f"üó∫Ô∏è  –ì–µ–∫—Å–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ: {len(data.get('map', []))}")
            
            # –î–µ—Ç–∞–ª–∏ –ø–æ –º—É—Ä–∞–≤—å—è–º
            ants = data.get('ants', [])
            ant_types = {0: '–†–∞–±–æ—á–∏–π', 1: '–ë–æ–µ—Ü', 2: '–†–∞–∑–≤–µ–¥—á–∏–∫'}
            type_counts = {}
            for ant in ants:
                ant_type = ant_types.get(ant['type'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                type_counts[ant_type] = type_counts.get(ant_type, 0) + 1
                
            print("üìä –°–æ—Å—Ç–∞–≤ –∞—Ä–º–∏–∏:")
            for ant_type, count in type_counts.items():
                print(f"   {ant_type}: {count}")
                
        return data
    
    def send_move_debug(self, moves, strategy: str = "unknown"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥ —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        if self.debug_mode:
            print(f"\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ {len(moves)} –∫–æ–º–∞–Ω–¥ ({strategy} —Å—Ç—Ä–∞—Ç–µ–≥–∏—è)")
            for i, move in enumerate(moves[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–æ–º–∞–Ω–¥—ã
                ant_id = move['ant'][:8] + "..." if len(move['ant']) > 8 else move['ant']
                path_length = len(move['path'])
                print(f"   {i+1}. –ú—É—Ä–∞–≤–µ–π {ant_id}: –ø—É—Ç—å –∏–∑ {path_length} —à–∞–≥–æ–≤")
            if len(moves) > 3:
                print(f"   ... –∏ –µ—â–µ {len(moves) - 3} –∫–æ–º–∞–Ω–¥")
                
        result = self.send_move(moves)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ö–æ–¥–∞
        if hasattr(self, 'current_arena_data'):
            turn_number = self.current_arena_data.get('turnNo', 0)
            self.analyzer.log_turn(turn_number, self.current_arena_data, moves, strategy)
            
        return result
    
    def run_debug_session(self, max_turns: int = 10):
        """–ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ö–æ–¥–æ–≤"""
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π —Å–µ—Å—Å–∏–∏ (–º–∞–∫—Å–∏–º—É–º {max_turns} —Ö–æ–¥–æ–≤)")
        
        turn_count = 0
        try:
            while turn_count < max_turns:
                arena_data = self.get_arena_debug()
                if not arena_data:
                    print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞—Ä–µ–Ω—ã")
                    break
                
                self.current_arena_data = arena_data
                next_turn_in = arena_data.get('nextTurnIn', 0)
                
                if next_turn_in <= 0:
                    print("üèÅ –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω")
                    break
                
                # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                moves = []
                ants = arena_data.get('ants', [])
                
                for ant in ants:
                    # –°–ª—É—á–∞–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    neighbors = self.get_neighbors(ant['q'], ant['r'])
                    if neighbors:
                        target = neighbors[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Å–µ–¥–∞
                        moves.append({
                            "ant": ant['id'],
                            "path": [{'q': target[0], 'r': target[1]}]
                        })
                
                self.send_move_debug(moves, "debug")
                turn_count += 1
                
                print(f"‚úÖ –•–æ–¥ {turn_count} –∑–∞–≤–µ—Ä—à–µ–Ω")
                time.sleep(2)
                
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  –û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Å–µ—Å—Å–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π —Å–µ—Å—Å–∏–∏: {e}")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.analyzer.print_statistics()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥
        save_log = input("\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥ –∏–≥—Ä—ã? (y/n): ").lower().strip()
        if save_log == 'y':
            self.analyzer.save_game_log()

def test_api_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API"""
    print("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API...")
    
    client = DebugClient(debug_mode=True)
    
    try:
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞—Ä–µ–Ω—ã
        arena_data = client.get_arena()
        if arena_data:
            print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {len(arena_data)} –ø–æ–ª–µ–π")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞—Ä–µ–Ω—ã")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    # –ú–µ–Ω—é –æ—Ç–ª–∞–¥–∫–∏
    while True:
        print("\n" + "="*50)
        print("–û–¢–õ–ê–î–û–ß–ù–û–ï –ú–ï–ù–Æ")
        print("="*50)
        print("1. –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API")
        print("2. –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π —Å–µ—Å—Å–∏–∏")
        print("3. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-3): ").strip()
        
        if choice == '1':
            test_api_connection()
        elif choice == '2':
            max_turns = input("–ú–∞–∫—Å–∏–º—É–º —Ö–æ–¥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10): ").strip()
            max_turns = int(max_turns) if max_turns.isdigit() else 10
            
            debug_client = DebugClient(debug_mode=True)
            debug_client.run_debug_session(max_turns)
        elif choice == '3':
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
