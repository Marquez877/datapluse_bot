#!/usr/bin/env python3
"""
üéØ –ú–ê–°–¢–ï–†-–°–ò–°–¢–ï–ú–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò: –ü–û–õ–ù–û–ï –î–û–ú–ò–ù–ò–†–û–í–ê–ù–ò–ï
–ö–æ–º–∞–Ω–¥–∞ MACAN team - –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!
"""

import asyncio
import time
import threading
from concurrent.futures import ThreadPoolExecutor, as_completed
from config import APIclient
from ultra_aggressive import UltraAggressiveStrategy
from resource_harvester import ResourceHarvester
from zone_controller import ZoneController
from rhythm_controller import GameRhythmController, DecisionMaker

class DominationMaster:
    def __init__(self, base_url="https://games-test.datsteam.dev"):
        self.base_url = base_url
        self.api_client = APIclient(base_url)
        self.ultra_strategy = UltraAggressiveStrategy()
        self.zone_controller = ZoneController()
        self.rhythm_controller = GameRhythmController()
        self.decision_maker = DecisionMaker()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        self.total_moves_made = 0
        self.successful_moves = 0
        self.game_phase = "early"  # early, mid, late
        self.performance_metrics = {
            'ant_growth_rate': 0,
            'resource_efficiency': 0,
            'territory_control': 0,
            'combat_effectiveness': 0
        }
        
        # –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å
        self.executor = ThreadPoolExecutor(max_workers=4)
        self.processing_lock = threading.Lock()
        
    async def run_domination_cycle(self):
        """–ì–õ–ê–í–ù–´–ô –¶–ò–ö–õ –î–û–ú–ò–ù–ò–†–û–í–ê–ù–ò–Ø"""
        print("üî• –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –ü–û–õ–ù–û–ì–û –î–û–ú–ò–ù–ò–†–û–í–ê–ù–ò–Ø! üî•")
        
        async with ResourceHarvester(self.base_url) as harvester:
            turn_count = 0
            
            while True:
                turn_start = time.time()
                print(f"\n=== –•–û–î {turn_count + 1} ===")
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Ä–µ–Ω—ã
                    arena_data = await harvester.async_get_arena()
                    if not arena_data:
                        await asyncio.sleep(0.5)
                        continue
                    
                    # –ê–Ω–∞–ª–∏–∑ –∏–≥—Ä–æ–≤–æ–π —Ñ–∞–∑—ã
                    self.update_game_phase(arena_data)
                    
                    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
                    analysis_tasks = await self.parallel_analysis(arena_data, harvester)
                    
                    # –ü—Ä–∏–Ω—è—Ç–∏–µ –º–∞—Å—Ç–µ—Ä-—Ä–µ—à–µ–Ω–∏—è
                    master_plan = self.create_master_plan(analysis_tasks, arena_data)
                    
                    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
                    execution_result = await self.execute_master_plan(master_plan, harvester)
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
                    self.update_performance_metrics(arena_data, execution_result)
                    
                    # –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                    self.adapt_strategy()
                    
                    # –ö–æ–Ω—Ç—Ä–æ–ª—å —Ç–µ–º–ø–∞
                    turn_duration = time.time() - turn_start
                    self.rhythm_controller.record_turn_metrics(
                        turn_start, 
                        len(master_plan.get('actions', [])),
                        execution_result.get('successful_actions', 0)
                    )
                    
                    # –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
                    self.print_progress_report(arena_data, turn_count)
                    
                    turn_count += 1
                    
                    # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    optimal_delay = self.rhythm_controller.optimize_turn_timing()
                    await asyncio.sleep(optimal_delay)
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                    await asyncio.sleep(1)
    
    async def parallel_analysis(self, arena_data, harvester):
        """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º"""
        analysis_results = {}
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = {
            'ultra_strategy': asyncio.create_task(
                self.analyze_ultra_strategy(arena_data)
            ),
            'resource_optimization': asyncio.create_task(
                harvester.optimize_resource_collection(arena_data)
            ),
            'territory_analysis': asyncio.create_task(
                self.analyze_territory(arena_data)
            ),
            'rhythm_analysis': asyncio.create_task(
                self.analyze_rhythm()
            )
        }
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for name, task in tasks.items():
            try:
                analysis_results[name] = await task
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {name}: {e}")
                analysis_results[name] = {}
        
        return analysis_results
    
    async def analyze_ultra_strategy(self, arena_data):
        """–ê–Ω–∞–ª–∏–∑ —É–ª—å—Ç—Ä–∞-–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return await asyncio.get_event_loop().run_in_executor(
            self.executor,
            self.ultra_strategy.analyze_situation,
            arena_data
        )
    
    async def analyze_territory(self, arena_data):
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏"""
        return await asyncio.get_event_loop().run_in_executor(
            self.executor,
            self.zone_controller.analyze_territory,
            arena_data
        )
    
    async def analyze_rhythm(self):
        """–ê–Ω–∞–ª–∏–∑ —Ä–∏—Ç–º–∞ –∏–≥—Ä—ã"""
        return await asyncio.get_event_loop().run_in_executor(
            self.executor,
            self.rhythm_controller.analyze_game_tempo
        )
    
    def create_master_plan(self, analysis_results, arena_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–ø–ª–∞–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π"""
        ants = arena_data.get('ants', [])
        
        # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        workers = [ant for ant in ants if ant['type'] == 0]
        fighters = [ant for ant in ants if ant['type'] == 1]
        scouts = [ant for ant in ants if ant['type'] == 2]
        
        master_plan = {
            'actions': [],
            'priorities': [],
            'emergency_actions': []
        }
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –º—É—Ä–∞–≤—å–µ–≤ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        if len(ants) < 50:  # –õ–∏–º–∏—Ç —Ä–æ—Å—Ç–∞
            create_ant_action = self.plan_ant_creation(arena_data)
            if create_ant_action:
                master_plan['actions'].append(create_ant_action)
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –°–±–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤
        resource_assignments = analysis_results.get('resource_optimization', [])
        for assignment in resource_assignments[:10]:  # –¢–æ–ø-10 –∑–∞–¥–∞–Ω–∏–π
            master_plan['actions'].append({
                'type': 'move',
                'ant_id': assignment['worker_id'],
                'target': assignment['target'],
                'priority': 90
            })
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        expansion_zones = analysis_results.get('territory_analysis', [])
        for i, (zone_pos, score) in enumerate(expansion_zones[:3]):
            if scouts and i < len(scouts):
                master_plan['actions'].append({
                    'type': 'move',
                    'ant_id': scouts[i]['id'],
                    'target': zone_pos,
                    'priority': 70
                })
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: –£–ª—å—Ç—Ä–∞-–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        ultra_actions = analysis_results.get('ultra_strategy', {}).get('actions', [])
        master_plan['actions'].extend(ultra_actions[:5])
        
        return master_plan
    
    def plan_ant_creation(self, arena_data):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –º—É—Ä–∞–≤—å—è"""
        ants = arena_data.get('ants', [])
        nectar = arena_data.get('nectar', 0)
        
        if nectar < 10:  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–µ–∫—Ç–∞—Ä–∞
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º—É—Ä–∞–≤—å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
        workers = len([ant for ant in ants if ant['type'] == 0])
        fighters = len([ant for ant in ants if ant['type'] == 1])
        scouts = len([ant for ant in ants if ant['type'] == 2])
        
        total_ants = len(ants)
        
        # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤
        optimal_composition = self.zone_controller.calculate_optimal_composition(total_ants + 1)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
        if workers < optimal_composition['workers']:
            ant_type = 0  # –†–∞–±–æ—á–∏–π
        elif fighters < optimal_composition['fighters']:
            ant_type = 1  # –ë–æ–µ—Ü
        else:
            ant_type = 2  # –†–∞–∑–≤–µ–¥—á–∏–∫
        
        return {
            'type': 'create_ant',
            'ant_type': ant_type,
            'priority': 100
        }
    
    async def execute_master_plan(self, master_plan, harvester):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–ø–ª–∞–Ω–∞"""
        actions = master_plan.get('actions', [])
        if not actions:
            return {'successful_actions': 0}
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        actions.sort(key=lambda x: x.get('priority', 0), reverse=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è API
        moves = []
        for action in actions[:20]:  # –õ–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π
            if action['type'] == 'move':
                moves.append({
                    'ant_id': action['ant_id'],
                    'q': action['target'][0],
                    'r': action['target'][1]
                })
            elif action['type'] == 'create_ant':
                moves.append({
                    'create': True,
                    'type': action['ant_type']
                })
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã
        if moves:
            result = await harvester.async_send_moves(moves)
            self.total_moves_made += len(moves)
            
            if result:
                self.successful_moves += len(moves)
                return {'successful_actions': len(moves)}
        
        return {'successful_actions': 0}
    
    def update_game_phase(self, arena_data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π —Ñ–∞–∑—ã"""
        ants = arena_data.get('ants', [])
        ant_count = len(ants)
        
        if ant_count < 10:
            self.game_phase = "early"
        elif ant_count < 30:
            self.game_phase = "mid"
        else:
            self.game_phase = "late"
    
    def update_performance_metrics(self, arena_data, execution_result):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        ants = arena_data.get('ants', [])
        
        # –°–∫–æ—Ä–æ—Å—Ç—å —Ä–æ—Å—Ç–∞ –∞—Ä–º–∏–∏
        current_ant_count = len(ants)
        self.performance_metrics['ant_growth_rate'] = current_ant_count
        
        # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if self.total_moves_made > 0:
            self.performance_metrics['execution_efficiency'] = (
                self.successful_moves / self.total_moves_made * 100
            )
    
    def adapt_strategy(self):
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        tempo_analysis = self.rhythm_controller.analyze_game_tempo()
        
        if tempo_analysis.get('recommended_mode') == 'ultra_aggressive':
            self.ultra_strategy.aggressiveness_level = min(1.0, 
                self.ultra_strategy.aggressiveness_level + 0.1)
        elif tempo_analysis.get('avg_efficiency', 0) < 50:
            self.ultra_strategy.aggressiveness_level = max(0.3, 
                self.ultra_strategy.aggressiveness_level - 0.1)
    
    def print_progress_report(self, arena_data, turn_count):
        """–û—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ"""
        ants = arena_data.get('ants', [])
        nectar = arena_data.get('nectar', 0)
        
        workers = len([ant for ant in ants if ant['type'] == 0])
        fighters = len([ant for ant in ants if ant['type'] == 1])
        scouts = len([ant for ant in ants if ant['type'] == 2])
        
        efficiency = 0
        if self.total_moves_made > 0:
            efficiency = (self.successful_moves / self.total_moves_made) * 100
        
        print(f"üèÜ –ü–†–û–ì–†–ï–°–° –î–û–ú–ò–ù–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"   üìä –•–æ–¥: {turn_count + 1}")
        print(f"   üêú –ú—É—Ä–∞–≤—å–∏: {len(ants)} (–†:{workers}, –ë:{fighters}, –†:{scouts})")
        print(f"   üçØ –ù–µ–∫—Ç–∞—Ä: {nectar}")
        print(f"   üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {efficiency:.1f}%")
        print(f"   üéØ –§–∞–∑–∞: {self.game_phase}")

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    """–ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê"""
    master = DominationMaster()
    await master.run_domination_cycle()

if __name__ == "__main__":
    print("üöÄ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–ì–û –î–û–ú–ò–ù–ò–†–û–í–ê–ù–ò–Ø –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê!")
    print("üèÜ –ö–æ–º–∞–Ω–¥–∞ MACAN team –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–±–µ–¥–µ!")
    asyncio.run(main())
