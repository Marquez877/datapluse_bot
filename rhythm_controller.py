#!/usr/bin/env python3
"""
üöÄ –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ò–¢–ú–û–ú –ò –¢–ï–ú–ü–û–ú –ò–ì–†–´
–ö–æ–º–∞–Ω–¥–∞ MACAN team: –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º —Ç–µ–º–ø –±–∏—Ç–≤—ã!
"""

import time
from collections import deque
import statistics

class GameRhythmController:
    def __init__(self):
        self.turn_times = deque(maxlen=20)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Ö–æ–¥–æ–≤
        self.response_times = deque(maxlen=20)
        self.action_efficiency = deque(maxlen=20)
        self.tempo_mode = "aggressive"  # aggressive, balanced, defensive
        
    def record_turn_metrics(self, turn_start_time, actions_taken, successful_actions):
        """–ó–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Ö–æ–¥–∞"""
        turn_duration = time.time() - turn_start_time
        self.turn_times.append(turn_duration)
        
        efficiency = (successful_actions / max(1, actions_taken)) * 100
        self.action_efficiency.append(efficiency)
        
    def analyze_game_tempo(self):
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–∞ –∏–≥—Ä—ã"""
        if len(self.turn_times) < 3:
            return {"status": "insufficient_data"}
        
        avg_turn_time = statistics.mean(self.turn_times)
        avg_efficiency = statistics.mean(self.action_efficiency)
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
        recent_times = list(self.turn_times)[-5:]
        early_times = list(self.turn_times)[:5] if len(self.turn_times) >= 10 else recent_times
        
        tempo_trend = "stable"
        if len(recent_times) >= 3 and len(early_times) >= 3:
            if statistics.mean(recent_times) < statistics.mean(early_times):
                tempo_trend = "accelerating"
            elif statistics.mean(recent_times) > statistics.mean(early_times):
                tempo_trend = "slowing"
        
        return {
            "avg_turn_time": avg_turn_time,
            "avg_efficiency": avg_efficiency,
            "tempo_trend": tempo_trend,
            "recommended_mode": self.recommend_tempo_mode(avg_efficiency, tempo_trend)
        }
    
    def recommend_tempo_mode(self, efficiency, trend):
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ —Ç–µ–º–ø–∞"""
        if efficiency > 80 and trend == "accelerating":
            return "ultra_aggressive"
        elif efficiency > 60:
            return "aggressive"
        elif efficiency > 40:
            return "balanced"
        else:
            return "conservative"
    
    def calculate_action_priority(self, action_type, current_situation):
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
        base_priorities = {
            "create_ant": 100,
            "collect_resource": 90,
            "move_to_food": 85,
            "explore": 70,
            "attack": 60,
            "defend": 80
        }
        
        priority = base_priorities.get(action_type, 50)
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if self.tempo_mode == "ultra_aggressive":
            if action_type in ["create_ant", "collect_resource"]:
                priority += 20
        elif self.tempo_mode == "aggressive":
            if action_type in ["create_ant", "collect_resource", "move_to_food"]:
                priority += 10
        elif self.tempo_mode == "conservative":
            if action_type == "defend":
                priority += 15
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏
        ant_count = current_situation.get('ant_count', 0)
        if ant_count < 10 and action_type == "create_ant":
            priority += 30  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –Ω–∞—Ä–∞—â–∏–≤–∞—Ç—å –∞—Ä–º–∏—é
        
        return min(150, priority)  # –ú–∞–∫—Å–∏–º—É–º 150
    
    def optimize_turn_timing(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ö–æ–¥–∞"""
        if not self.turn_times:
            return 0.3  # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        
        avg_time = statistics.mean(self.turn_times)
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        if avg_time < 0.2:  # –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ
            return 0.4
        elif avg_time > 1.0:  # –°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ
            return 0.1
        else:
            return max(0.1, min(0.5, avg_time * 0.8))
    
    def emergency_tempo_boost(self, crisis_level):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ —Ç–µ–º–ø–∞"""
        boost_settings = {
            "low": {"delay_reduction": 0.7, "action_limit": 15},
            "medium": {"delay_reduction": 0.5, "action_limit": 20},
            "high": {"delay_reduction": 0.3, "action_limit": 25},
            "critical": {"delay_reduction": 0.1, "action_limit": 30}
        }
        
        return boost_settings.get(crisis_level, boost_settings["low"])

class DecisionMaker:
    def __init__(self):
        self.decision_history = deque(maxlen=50)
        self.success_rate = {}
        
    def make_strategic_decision(self, options, current_state):
        """–ü—Ä–∏–Ω—è—Ç–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""
        scored_options = []
        
        for option in options:
            score = self.evaluate_option(option, current_state)
            scored_options.append((option, score))
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—á–∫–æ–≤
        scored_options.sort(key=lambda x: x[1], reverse=True)
        
        # –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
        if len(scored_options) > 1:
            top_options = scored_options[:min(3, len(scored_options))]
            weights = [opt[1] for opt in top_options]
            
            # –í–∑–≤–µ—à–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
            total_weight = sum(weights)
            if total_weight > 0:
                import random
                choice_value = random.uniform(0, total_weight)
                current_weight = 0
                
                for option, weight in top_options:
                    current_weight += weight
                    if choice_value <= current_weight:
                        return option
        
        return scored_options[0][0] if scored_options else options[0]
    
    def evaluate_option(self, option, state):
        """–û—Ü–µ–Ω–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
        base_score = option.get('base_score', 50)
        
        # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —É—Å–ø–µ—Ö
        option_type = option.get('type', 'unknown')
        historical_success = self.success_rate.get(option_type, 0.5)
        
        # –¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
        urgency_bonus = option.get('urgency', 0) * 10
        resource_bonus = option.get('resource_value', 0)
        risk_penalty = option.get('risk_level', 0) * 5
        
        total_score = (
            base_score + 
            historical_success * 20 + 
            urgency_bonus + 
            resource_bonus - 
            risk_penalty
        )
        
        return max(0, total_score)
    
    def update_success_rate(self, option_type, was_successful):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Å–ø–µ—Ö–∞"""
        current_rate = self.success_rate.get(option_type, 0.5)
        # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
        alpha = 0.1
        new_rate = alpha * (1.0 if was_successful else 0.0) + (1 - alpha) * current_rate
        self.success_rate[option_type] = new_rate
