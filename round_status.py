#!/usr/bin/env python3
"""
üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –†–ê–£–ù–î–ê
–ö–æ–º–∞–Ω–¥–∞ MACAN team: –≠—Ä–º–µ–∫ –û–∑–≥–æ–Ω–±–µ–∫–æ–≤, –≠–ª–¥–∏—è—Ä –ê–¥—ã–ª–±–µ–∫–æ–≤, –ö–∞–Ω—ã–∫–µ–π –ê—à—ã—Ä–∞–∫–º–∞–Ω–æ–≤–∞
"""

import requests
from config import TOKEN, HEADERS, BASE_URL_PROD, BASE_URL_TEST

def check_round_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—É–Ω–¥–æ–≤ –Ω–∞ –±–æ–µ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ"""
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –†–ê–£–ù–î–û–í")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–µ–≤–æ–π —Å–µ—Ä–≤–µ—Ä
    print("‚öîÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–û–ï–í–û–ô —Å–µ—Ä–≤–µ—Ä...")
    try:
        url = f"{BASE_URL_PROD}/rounds"
        response = requests.get(url, headers=HEADERS, timeout=10)
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –ë–æ–µ–≤–æ–π —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
            print(f"–î–∞–Ω–Ω—ã–µ: {data}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –±–æ–µ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            print(f"–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–æ–µ–≤—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º: {e}")
    
    print("\n" + "=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    print("üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¢–ï–°–¢–û–í–´–ô —Å–µ—Ä–≤–µ—Ä...")
    try:
        url = f"{BASE_URL_TEST}/rounds"
        response = requests.get(url, headers=HEADERS, timeout=10)
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
            print(f"–î–∞–Ω–Ω—ã–µ: {data}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            print(f"–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º: {e}")

def check_arena_access():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∞—Ä–µ–Ω–µ"""
    
    print("\nüèüÔ∏è –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê –ö –ê–†–ï–ù–ï")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–µ–≤—É—é –∞—Ä–µ–Ω—É
    print("‚öîÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–µ–≤—É—é –∞—Ä–µ–Ω—É...")
    try:
        url = f"{BASE_URL_PROD}/arena"
        response = requests.get(url, headers=HEADERS, timeout=10)
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –î–æ—Å—Ç—É–ø –∫ –±–æ–µ–≤–æ–π –∞—Ä–µ–Ω–µ –ø–æ–ª—É—á–µ–Ω!")
            print(f"–ù–∞—à–∏—Ö –º—É—Ä–∞–≤—å–µ–≤: {len(data.get('myAnts', []))}")
            print(f"–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞: {data.get('nextTurnIn', 0)} —Å–µ–∫")
            return True
        elif response.status_code == 403:
            print("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403 Forbidden)")
            print("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("- –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥")
            print("- –†–∞—É–Ω–¥ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è")
            print("- –†–∞—É–Ω–¥ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è")
            print("- –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
    
    return False

if __name__ == "__main__":
    print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω: {TOKEN[:8]}...")
    check_round_status()
    arena_available = check_arena_access()
    
    if arena_available:
        print("\nüéÆ –ì–û–¢–û–í –ö –ò–ì–†–ï!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python battle_start.py --prod")
    else:
        print("\n‚è≥ –ù–ï –ì–û–¢–û–í –ö –ò–ì–†–ï")
        print("–î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
