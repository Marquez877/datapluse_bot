#!/usr/bin/env python3
"""
üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–ù–´–• –§–û–†–ú–ê–¢–û–í –¢–û–ö–ï–ù–ê –ò API
–ö–æ–º–∞–Ω–¥–∞ MACAN team: –≠—Ä–º–µ–∫ –û–∑–≥–æ–Ω–±–µ–∫–æ–≤, –≠–ª–¥–∏—è—Ä –ê–¥—ã–ª–±–µ–∫–æ–≤, –ö–∞–Ω—ã–∫–µ–π –ê—à—ã—Ä–∞–∫–º–∞–Ω–æ–≤–∞
"""

import requests
import os
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("TOKEN")

def test_token_formats():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ç–æ–∫–µ–Ω–∞ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
    
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–û–†–ú–ê–¢–û–í –¢–û–ö–ï–ù–ê")
    print("=" * 50)
    print(f"–¢–æ–∫–µ–Ω: {TOKEN}")
    print("=" * 50)
    
    # –†–∞–∑–ª–∏—á–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    base_urls = [
        "https://games.datsteam.dev/api",
        "https://games-test.datsteam.dev/api", 
        "https://games.datsteam.dev",
        "https://games-test.datsteam.dev"
    ]
    
    # –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    header_formats = [
        {"Authorization": f"Bearer {TOKEN}"},
        {"Authorization": f"{TOKEN}"},
        {"X-API-Key": TOKEN},
        {"Token": TOKEN},
        {"API-Token": TOKEN},
        {"X-Token": TOKEN}
    ]
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
    for base_url in base_urls:
        print(f"\nüåê –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä: {base_url}")
        print("-" * 40)
        
        for i, headers in enumerate(header_formats):
            print(f"\n–§–æ—Ä–º–∞—Ç {i+1}: {headers}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            full_headers = {
                "Content-Type": "application/json",
                "Accept": "application/json",
                **headers
            }
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
            endpoints = ["/rounds", "/arena", "/register"]
            
            for endpoint in endpoints:
                try:
                    url = f"{base_url}{endpoint}"
                    response = requests.get(url, headers=full_headers, timeout=5)
                    
                    print(f"  {endpoint}: {response.status_code}", end="")
                    
                    if response.status_code == 200:
                        print(" ‚úÖ –£–°–ü–ï–•!")
                        print(f"    –û—Ç–≤–µ—Ç: {response.text[:100]}...")
                        return base_url, headers, endpoint
                    elif response.status_code == 401:
                        print(" ‚ùå –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                    elif response.status_code == 403:
                        print(" ‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                    elif response.status_code == 404:
                        print(" ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω")
                    elif response.status_code == 400:
                        print(" ‚ùå –ü–ª–æ—Ö–æ–π –∑–∞–ø—Ä–æ—Å")
                        if "token" in response.text.lower():
                            print(f"    –û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞: {response.text}")
                    else:
                        print(f" ‚ùì –ö–æ–¥ {response.status_code}")
                        
                except Exception as e:
                    print(f"  {endpoint}: ‚ùå –û—à–∏–±–∫–∞ - {e}")
    
    return None, None, None

def test_specific_documentation_format():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    
    print("\nüîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò")
    print("=" * 50)
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ Bearer
    headers_no_bearer = {
        "Authorization": TOKEN,
        "Content-Type": "application/json",
        "Accept": "application/json"
    }
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Å X-API-Key
    headers_api_key = {
        "X-API-Key": TOKEN,
        "Content-Type": "application/json", 
        "Accept": "application/json"
    }
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º query parameter
    test_cases = [
        ("Authorization header –±–µ–∑ Bearer", "https://games.datsteam.dev/api/rounds", headers_no_bearer, {}),
        ("X-API-Key header", "https://games.datsteam.dev/api/rounds", headers_api_key, {}),
        ("Query parameter", "https://games.datsteam.dev/api/rounds", {}, {"token": TOKEN}),
        ("Query parameter alt", "https://games.datsteam.dev/api/rounds", {}, {"api_key": TOKEN}),
    ]
    
    for name, url, headers, params in test_cases:
        print(f"\nüß™ {name}:")
        try:
            response = requests.get(url, headers=headers, params=params, timeout=5)
            print(f"  –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"  –û—Ç–≤–µ—Ç: {response.text[:200]}...")
            
            if response.status_code == 200:
                print("  ‚úÖ –£–°–ü–ï–•! –≠—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                return headers, params
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    return None, None

def test_post_requests():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º POST –∑–∞–ø—Ä–æ—Å—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏"""
    
    print("\nüì§ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï POST –ó–ê–ü–†–û–°–û–í")
    print("=" * 50)
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    team_data = {
        "name": "MACAN team",
        "members": [
            "–≠—Ä–º–µ–∫ –û–∑–≥–æ–Ω–±–µ–∫–æ–≤",
            "–≠–ª–¥–∏—è—Ä –ê–¥—ã–ª–±–µ–∫–æ–≤", 
            "–ö–∞–Ω—ã–∫–µ–π –ê—à—ã—Ä–∞–∫–º–∞–Ω–æ–≤–∞"
        ]
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è POST
    header_formats = [
        {"Authorization": f"Bearer {TOKEN}"},
        {"Authorization": f"{TOKEN}"},
        {"X-API-Key": TOKEN},
    ]
    
    base_urls = [
        "https://games.datsteam.dev/api",
        "https://games-test.datsteam.dev/api"
    ]
    
    for base_url in base_urls:
        print(f"\nüåê –°–µ—Ä–≤–µ—Ä: {base_url}")
        
        for i, auth_headers in enumerate(header_formats):
            headers = {
                "Content-Type": "application/json",
                "Accept": "application/json",
                **auth_headers
            }
            
            print(f"\n–§–æ—Ä–º–∞—Ç {i+1}: {auth_headers}")
            
            try:
                url = f"{base_url}/register"
                response = requests.post(url, headers=headers, json=team_data, timeout=10)
                
                print(f"  /register: {response.status_code}")
                print(f"  –û—Ç–≤–µ—Ç: {response.text[:200]}...")
                
                if response.status_code in [200, 201]:
                    print("  ‚úÖ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!")
                    return True
                elif response.status_code == 409:
                    print("  ‚úÖ –£–ñ–ï –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–´!")
                    return True
                    
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    return False

if __name__ == "__main__":
    print("üöÄ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ò –¢–û–ö–ï–ù–ê")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –†–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ç–æ–∫–µ–Ω–∞
    working_url, working_headers, working_endpoint = test_token_formats()
    
    if working_url:
        print(f"\nüéâ –ù–ê–ô–î–ï–ù –†–ê–ë–û–ß–ò–ô –§–û–†–ú–ê–¢!")
        print(f"URL: {working_url}")
        print(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {working_headers}")
        print(f"–≠–Ω–¥–ø–æ–∏–Ω—Ç: {working_endpoint}")
    
    # –¢–µ—Å—Ç 2: –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    doc_headers, doc_params = test_specific_documentation_format()
    
    # –¢–µ—Å—Ç 3: POST –∑–∞–ø—Ä–æ—Å—ã
    print("\n" + "=" * 60)
    post_success = test_post_requests()
    
    print("\nüèÅ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print("=" * 60)
    if working_url or doc_headers or post_success:
        print("‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π —Ñ–æ—Ä–º–∞—Ç API!")
    else:
        print("‚ùå –ù–∏ –æ–¥–∏–Ω —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        print("- –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω")
        print("- –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω") 
        print("- –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
