"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ –±–æ–µ–≤—ã–º–∏ —Ä–∞—É–Ω–¥–∞–º–∏
–ö–æ–º–∞–Ω–¥–∞ MACAN team:
- –≠—Ä–º–µ–∫ –û–∑–≥–æ–Ω–±–µ–∫–æ–≤
- –≠–ª–¥–∏—è—Ä –ê–¥—ã–ª–±–µ–∫–æ–≤
- –ö–∞–Ω—ã–∫–µ–π –ê—à—ã—Ä–∞–∫–º–∞–Ω–æ–≤–∞
"""
import time
from config import APIclient

class TrainingSession:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
    
    def __init__(self, use_test_server=True):
        self.client = APIclient(use_test_server=use_test_server)
        print(f"üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {'–¢–ï–°–¢–û–í–û–ú–£' if use_test_server else '–ë–û–ï–í–û–ú–£'} —Å–µ—Ä–≤–µ—Ä—É")
    
    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        print("\nüîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
        
        try:
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—É–Ω–¥–∞—Ö
            rounds_info = self.client.get_rounds_info()
            if rounds_info:
                print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API —É—Å–ø–µ—à–Ω–æ!")
                print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—É–Ω–¥–∞—Ö –ø–æ–ª—É—á–µ–Ω–∞")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—É–Ω–¥–∞—Ö")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def test_registration(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Ä–∞—É–Ω–¥"""
        print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")
        
        try:
            result = self.client.register_for_round()
            if result:
                print("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
                print(f"üìã –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {result}")
                return True
            else:
                print("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def test_arena_data(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞—Ä–µ–Ω—ã"""
        print("\nüèüÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞—Ä–µ–Ω—ã...")
        
        try:
            arena_data = self.client.get_arena()
            if arena_data:
                print("‚úÖ –î–∞–Ω–Ω—ã–µ –∞—Ä–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã!")
                print(f"üêú –ú—É—Ä–∞–≤—å–µ–≤: {len(arena_data.get('ants', []))}")
                print(f"üëπ –í—Ä–∞–≥–æ–≤: {len(arena_data.get('enemies', []))}")
                print(f"üçé –†–µ—Å—É—Ä—Å–æ–≤: {len(arena_data.get('food', []))}")
                print(f"üè† –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–º–∞: {arena_data.get('home', [])}")
                print(f"üèÜ –°—á–µ—Ç: {arena_data.get('score', 0)}")
                print(f"üî¢ –ù–æ–º–µ—Ä —Ö–æ–¥–∞: {arena_data.get('turnNo', 'N/A')}")
                print(f"‚è∞ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞: {arena_data.get('nextTurnIn', 0)} —Å–µ–∫")
                return arena_data
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞—Ä–µ–Ω—ã")
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞—Ä–µ–Ω—ã: {e}")
            return None
    
    def test_move_command(self, arena_data):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–≤–∏–∂–µ–Ω–∏—è"""
        print("\nüö∂ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥...")
        
        if not arena_data:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞—Ä–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        ants = arena_data.get('ants', [])
        if not ants:
            print("‚ùå –ù–µ—Ç –º—É—Ä–∞–≤—å–µ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è")
            return False
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –º—É—Ä–∞–≤—å—è –∏ –¥–∞–µ–º –µ–º—É –ø—Ä–æ—Å—Ç—É—é –∫–æ–º–∞–Ω–¥—É
        test_ant = ants[0]
        print(f"üêú –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –º—É—Ä–∞–≤—å—è {test_ant['id'][:8]}...")
        
        # –ü—Ä–æ—Å—Ç–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞ —Å–æ—Å–µ–¥–Ω–∏–π –≥–µ–∫—Å
        neighbors = self.client.get_neighbors(test_ant['q'], test_ant['r'])
        if neighbors:
            target = neighbors[0]
            test_moves = [{
                "ant": test_ant['id'],
                "path": [{"q": target[0], "r": target[1]}]
            }]
            
            try:
                result = self.client.send_move(test_moves)
                if result is not None:
                    print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –¥–≤–∏–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                    print(f"üìã –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {result}")
                    return True
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã")
                    return False
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
                return False
        else:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Å–µ–¥–Ω–∏—Ö –≥–µ–∫—Å–æ–≤")
            return False
    
    def test_game_logs(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤"""
        print("\nüìú –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤...")
        
        try:
            logs = self.client.get_logs()
            if logs:
                print("‚úÖ –õ–æ–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
                print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö: {len(logs) if isinstance(logs, list) else 'N/A'}")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
            return False
    
    def run_full_test(self):
        """–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π API"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API...")
        print("=" * 60)
        
        test_results = {
            'connection': False,
            'registration': False,
            'arena_data': False,
            'move_command': False,
            'logs': False
        }
        
        # 1. –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        test_results['connection'] = self.test_connection()
        
        # 2. –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if test_results['connection']:
            test_results['registration'] = self.test_registration()
        
        # 3. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞—Ä–µ–Ω—ã
        arena_data = None
        if test_results['registration']:
            arena_data = self.test_arena_data()
            test_results['arena_data'] = arena_data is not None
        
        # 4. –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥ –¥–≤–∏–∂–µ–Ω–∏—è
        if test_results['arena_data'] and arena_data:
            test_results['move_command'] = self.test_move_command(arena_data)
        
        # 5. –¢–µ—Å—Ç –ª–æ–≥–æ–≤
        test_results['logs'] = self.test_game_logs()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("=" * 60)
        
        for test_name, result in test_results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
            test_name_ru = {
                'connection': '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API',
                'registration': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ä–∞—É–Ω–¥',
                'arena_data': '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞—Ä–µ–Ω—ã',
                'move_command': '–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–≤–∏–∂–µ–Ω–∏—è',
                'logs': '–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤'
            }.get(test_name, test_name)
            
            print(f"{test_name_ru}: {status}")
        
        success_rate = sum(test_results.values()) / len(test_results) * 100
        print(f"\nüéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {success_rate:.1f}%")
        
        if success_rate >= 80:
            print("üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –±–æ–µ–≤—ã–º —Ä–∞—É–Ω–¥–∞–º!")
        elif success_rate >= 60:
            print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        else:
            print("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        
        return test_results
    
    def run_training_round(self, max_turns=5):
        """–ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞"""
        print(f"üèÉ –ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞ (–º–∞–∫—Å–∏–º—É–º {max_turns} —Ö–æ–¥–æ–≤)...")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è
        if not self.test_registration():
            return False
        
        turn_count = 0
        successful_turns = 0
        
        try:
            while turn_count < max_turns:
                print(f"\n--- –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π —Ö–æ–¥ {turn_count + 1} ---")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ö–æ–¥
                success = self.client.execute_turn()
                if success:
                    successful_turns += 1
                    print(f"‚úÖ –•–æ–¥ {turn_count + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ö–æ–¥–µ {turn_count + 1}")
                
                turn_count += 1
                
                # –ñ–¥–µ–º –º–µ–∂–¥—É —Ö–æ–¥–∞–º–∏
                time.sleep(3)
                
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–º —Ä–∞—É–Ω–¥–µ: {e}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–†–ï–ù–ò–†–û–í–ö–ò:")
        print(f"–í—Å–µ–≥–æ —Ö–æ–¥–æ–≤: {turn_count}")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö —Ö–æ–¥–æ–≤: {successful_turns}")
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {successful_turns/turn_count*100:.1f}%" if turn_count > 0 else "N/A")
        
        return successful_turns == turn_count

def main():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    while True:
        print("\n" + "="*50)
        print("üéØ –ú–ï–ù–Æ –¢–†–ï–ù–ò–†–û–í–ö–ò DATSPULSE BOT")
        print("="*50)
        print("1. –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
        print("2. –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        print("3. –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π —Ä–∞—É–Ω–¥ (—Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä)")
        print("4. –ë–æ–µ–≤–æ–π —Ä–µ–∂–∏–º (–±–æ–µ–≤–æ–π —Å–µ—Ä–≤–µ—Ä)")
        print("5. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-5): ").strip()
        
        if choice == '1':
            trainer = TrainingSession(use_test_server=True)
            trainer.run_full_test()
            
        elif choice == '2':
            use_test = input("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä? (y/n): ").lower().strip() == 'y'
            trainer = TrainingSession(use_test_server=use_test)
            trainer.test_connection()
            
        elif choice == '3':
            max_turns = input("–ú–∞–∫—Å–∏–º—É–º —Ö–æ–¥–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5): ").strip()
            max_turns = int(max_turns) if max_turns.isdigit() else 5
            
            trainer = TrainingSession(use_test_server=True)
            trainer.run_training_round(max_turns)
            
        elif choice == '4':
            confirm = input("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ë–û–ï–í–û–ô —Ä–µ–∂–∏–º? (yes/no): ").strip().lower()
            if confirm == 'yes':
                from main import GameBot
                bot = GameBot()
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –±–æ–µ–≤–æ–π —Å–µ—Ä–≤–µ—Ä
                bot.api_client.base_url = "https://games.datsteam.dev/api"
                bot.run_game_loop()
            else:
                print("–ë–æ–µ–≤–æ–π —Ä–µ–∂–∏–º –æ—Ç–º–µ–Ω–µ–Ω")
                
        elif choice == '5':
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –£–¥–∞—á–∏ –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–∏!")
            break
            
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main()
