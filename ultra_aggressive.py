#!/usr/bin/env python3
"""
üöÄ –£–õ–¨–¢–†–ê-–ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê DOMINATION 
–ö–æ–º–∞–Ω–¥–∞ MACAN team: –≠—Ä–º–µ–∫ –û–∑–≥–æ–Ω–±–µ–∫–æ–≤, –≠–ª–¥–∏—è—Ä –ê–¥—ã–ª–±–µ–∫–æ–≤, –ö–∞–Ω—ã–∫–µ–π –ê—à—ã—Ä–∞–∫–º–∞–Ω–æ–≤–∞

–¶–ï–õ–ò:
1. –ì–ï–û–ú–ï–¢–†–ò–ß–ï–°–ö–ò–ô –†–û–°–¢ –º—É—Ä–∞–≤—å–µ–≤ –¥–æ 100
2. –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô —Å–±–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤  
3. –î–û–ú–ò–ù–ò–†–û–í–ê–ù–ò–ï —á–µ—Ä–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é
4. –£–ù–ò–ß–¢–û–ñ–ï–ù–ò–ï –≤—Ä–∞–≥–æ–≤ –∞—Ä–º–∏–µ–π
"""

import asyncio
import threading
from concurrent.futures import ThreadPoolExecutor
from collections import defaultdict
import time
import random
from typing import Dict, List, Tuple, Optional
from config import *

class UltraAgressiveStrategy:
    def __init__(self):
        self.explored_hexes = set()
        self.enemy_positions = {}
        self.resource_memory = {}
        self.turn_count = 0
        self.threat_assessment = defaultdict(int)
        
        # –ù–û–í–´–ï –°–ò–°–¢–ï–ú–´ –î–û–ú–ò–ù–ò–†–û–í–ê–ù–ò–Ø
        self.ant_assignments = {}  # ID -> —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞
        self.resource_claims = {}  # –ø–æ–∑–∏—Ü–∏—è -> ID –º—É—Ä–∞–≤—å—è
        self.formation_groups = defaultdict(list)  # —Ç–∏–ø —Ñ–æ—Ä–º–∞—Ü–∏–∏ -> –º—É—Ä–∞–≤—å–∏
        self.expansion_zones = []  # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–æ–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        self.blocked_positions = set()  # –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        self.last_successful_moves = {}  # ID -> –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Å–ø–µ—à–Ω—ã–π –ø—É—Ç—å
        
        # –°–ß–ï–¢–ß–ò–ö–ò –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò
        self.moves_blocked = 0
        self.resources_collected = 0
        self.territory_controlled = 0
        
    def assign_specialized_roles(self, ants: List[Dict], arena_data: Dict):
        """–°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –∫–∞–∂–¥–æ–º—É –º—É—Ä–∞–≤—å—é - —á–µ—Ç–∫–∞—è —Ä–æ–ª—å"""
        home_coords = arena_data.get('home', [])
        visible_food = arena_data.get('food', [])
        spot = arena_data.get('spot', {})
        main_hex = (spot.get('q', 0), spot.get('r', 0))
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        self.ant_assignments.clear()
        self.formation_groups.clear()
        
        workers = [ant for ant in ants if ant['type'] == ROLE_WORKER]
        fighters = [ant for ant in ants if ant['type'] == ROLE_FIGHTER] 
        scouts = [ant for ant in ants if ant['type'] == ROLE_SCOUT]
        
        # –†–ê–ë–û–ß–ò–ï: —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º
        for i, worker in enumerate(workers):
            worker_pos = (worker['q'], worker['r'])
            
            if worker_pos == main_hex:
                self.ant_assignments[worker['id']] = "EVACUATE_MAIN_HEX"
            elif worker.get('food') and worker['food'].get('amount', 0) > 0:
                self.ant_assignments[worker['id']] = "DELIVER_RESOURCES"
            elif i < len(visible_food):
                # –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–∞–∂–¥–æ–º—É —Ä–∞–±–æ—á–µ–º—É —Å–≤–æ–π —Ä–µ—Å—É—Ä—Å
                target_food = visible_food[i % len(visible_food)]
                self.ant_assignments[worker['id']] = f"COLLECT_{target_food['q']}_{target_food['r']}"
                self.resource_claims[(target_food['q'], target_food['r'])] = worker['id']
            else:
                self.ant_assignments[worker['id']] = "EXPLORE_RESOURCES"
        
        # –ë–û–ô–¶–´: —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–µ–≤—ã—Ö –≥—Ä—É–ø–ø
        for i, fighter in enumerate(fighters):
            fighter_pos = (fighter['q'], fighter['r'])
            
            if fighter_pos == main_hex:
                self.ant_assignments[fighter['id']] = "EVACUATE_MAIN_HEX"
            elif len(fighters) >= 3:  # –ï—Å—Ç—å –∞—Ä–º–∏—è –¥–ª—è –∞—Ç–∞–∫
                group_id = i // 3  # –ì—Ä—É–ø–ø—ã –ø–æ 3
                self.formation_groups[f"ATTACK_SQUAD_{group_id}"].append(fighter['id'])
                self.ant_assignments[fighter['id']] = f"ATTACK_FORMATION_{group_id}"
            else:
                self.ant_assignments[fighter['id']] = "DEFEND_BASE"
        
        # –†–ê–ó–í–ï–î–ß–ò–ö–ò: –∑–æ–Ω—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è  
        for i, scout in enumerate(scouts):
            scout_pos = (scout['q'], scout['r'])
            
            if scout_pos == main_hex:
                self.ant_assignments[scout['id']] = "EVACUATE_MAIN_HEX"
            else:
                zone_id = i % 4  # 4 –∑–æ–Ω—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
                self.ant_assignments[scout['id']] = f"SCOUT_ZONE_{zone_id}"
                
    def resolve_position_conflicts(self, moves: List[Dict], ants: List[Dict]) -> List[Dict]:
        """–ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ï —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø–æ–∑–∏—Ü–∏–π"""
        resolved_moves = []
        position_claims = defaultdict(list)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ü–µ–ª–µ–≤—ã–º –ø–æ–∑–∏—Ü–∏—è–º
        for move in moves:
            if move.get('path'):
                final_pos = (move['path'][-1]['q'], move['path'][-1]['r'])
                position_claims[final_pos].append(move)
        
        for position, competing_moves in position_claims.items():
            if len(competing_moves) == 1:
                resolved_moves.extend(competing_moves)
            else:
                # –†–ê–ó–†–ï–®–ï–ù–ò–ï –ö–û–ù–§–õ–ò–ö–¢–ê: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
                priority_move = self.select_priority_move(competing_moves, ants)
                resolved_moves.append(priority_move)
                
                # –û—Å—Ç–∞–ª—å–Ω—ã–º –¥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏
                for move in competing_moves:
                    if move != priority_move:
                        alternative = self.find_alternative_path(move, ants, position)
                        if alternative:
                            resolved_moves.append(alternative)
        
        return resolved_moves
    
    def select_priority_move(self, competing_moves: List[Dict], ants: List[Dict]) -> Dict:
        """–í—ã–±–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ"""
        ant_priorities = {}
        
        for move in competing_moves:
            ant_id = move['ant']
            ant = next((a for a in ants if a['id'] == ant_id), None)
            if not ant:
                continue
                
            priority = 0
            assignment = self.ant_assignments.get(ant_id, "")
            
            # –ü–†–ò–û–†–ò–¢–ï–¢–´ (—á–µ–º –±–æ–ª—å—à–µ —á–∏—Å–ª–æ - —Ç–µ–º –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            if "DELIVER_RESOURCES" in assignment:
                priority = 100  # –î–æ—Å—Ç–∞–≤–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ - –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            elif "COLLECT_" in assignment:
                priority = 90   # –°–±–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤
            elif "EVACUATE_MAIN_HEX" in assignment:
                priority = 80   # –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ–∫—Å–∞
            elif "ATTACK_FORMATION" in assignment:
                priority = 70   # –ë–æ–µ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ü–∏–∏
            elif ant['type'] == ROLE_WORKER:
                priority = 60   # –†–∞–±–æ—á–∏–µ –≤–∞–∂–Ω–µ–µ
            elif ant['type'] == ROLE_FIGHTER:
                priority = 50   # –ë–æ–π—Ü—ã
            else:
                priority = 40   # –†–∞–∑–≤–µ–¥—á–∏–∫–∏
                
            ant_priorities[move] = priority
        
        return max(competing_moves, key=lambda m: ant_priorities.get(m, 0))
    
    def find_alternative_path(self, blocked_move: Dict, ants: List[Dict], blocked_position: Tuple) -> Optional[Dict]:
        """–ü–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—É—Ç–∏ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ"""
        ant_id = blocked_move['ant']
        ant = next((a for a in ants if a['id'] == ant_id), None)
        if not ant:
            return None
            
        ant_pos = (ant['q'], ant['r'])
        
        # –ò—â–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
        neighbors = self.get_neighbors(*blocked_position)
        for neighbor in neighbors:
            if neighbor != ant_pos and neighbor not in self.blocked_positions:
                # –°–æ–∑–¥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å
                alternative_path = [{'q': neighbor[0], 'r': neighbor[1]}]
                return {
                    "ant": ant_id,
                    "path": alternative_path
                }
        
        return None
    
    def get_neighbors(self, q: int, r: int) -> List[Tuple[int, int]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å–µ–¥–Ω–∏—Ö –≥–µ–∫—Å–æ–≤"""
        directions = [(+1, 0), (+1, -1), (0, -1), (-1, 0), (-1, +1), (0, +1)]
        return [(q + dq, r + dr) for dq, dr in directions]
        
    def create_expansion_zones(self, home_coords: List[Dict], arena_data: Dict):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–æ–Ω –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —ç–∫—Å–ø–∞–Ω—Å–∏–∏"""
        self.expansion_zones.clear()
        
        if not home_coords:
            return
            
        home_center = home_coords[0]
        center_pos = (home_center['q'], home_center['r'])
        
        # –°–æ–∑–¥–∞–µ–º –∑–æ–Ω—ã –≤ —Ä–∞–∑–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö –æ—Ç –±–∞–∑—ã
        directions = [
            (10, 0),    # –í–æ—Å—Ç–æ–∫
            (5, 8),     # –°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫  
            (-5, 8),    # –°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥
            (-10, 0),   # –ó–∞–ø–∞–¥
            (-5, -8),   # –Æ–≥–æ-–∑–∞–ø–∞–¥
            (5, -8)     # –Æ–≥–æ-–≤–æ—Å—Ç–æ–∫
        ]
        
        for i, (dq, dr) in enumerate(directions):
            zone_center = (center_pos[0] + dq, center_pos[1] + dr)
            self.expansion_zones.append({
                'id': i,
                'center': zone_center,
                'priority': 10 - i,  # –ü–µ—Ä–≤—ã–µ –∑–æ–Ω—ã –≤–∞–∂–Ω–µ–µ
                'explored': False
            })

class SuperAgressiveAPIClient(APIclient):
    def __init__(self, use_test_server=True):
        super().__init__(use_test_server)
        self.strategy = UltraAgressiveStrategy()
        self.move_executor = ThreadPoolExecutor(max_workers=4)
        
    def execute_ultra_aggressive_turn(self):
        """–£–õ–¨–¢–†–ê-–ê–ì–†–ï–°–°–ò–í–ù–û–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö–æ–¥–∞ —Å –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å—é"""
        start_time = time.time()
        
        arena_data = self.get_arena()
        if not arena_data:
            return False
            
        our_ants = arena_data.get('ants', [])
        visible_enemies = arena_data.get('enemies', [])
        visible_food = arena_data.get('food', [])
        home_coords = arena_data.get('home', [])
        
        print(f"\nüöÄ –£–õ–¨–¢–†–ê-–ê–ì–†–ï–°–°–ò–í–ù–´–ô –•–û–î {self.strategy.turn_count}")
        print(f"–ê—Ä–º–∏—è: {len(our_ants)} | –í—Ä–∞–≥–∏: {len(visible_enemies)} | –†–µ—Å—É—Ä—Å—ã: {len(visible_food)} | –°—á–µ—Ç: {arena_data.get('score', 0)}")
        
        # 1. –ë–´–°–¢–†–ê–Ø –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –†–û–õ–ï–ô
        self.strategy.assign_specialized_roles(our_ants, arena_data)
        
        # 2. –°–û–ó–î–ê–ù–ò–ï –ó–û–ù –≠–ö–°–ü–ê–ù–°–ò–ò
        self.strategy.create_expansion_zones(home_coords, arena_data)
        
        # 3. –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ï –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –î–í–ò–ñ–ï–ù–ò–ô
        futures = []
        for ant in our_ants:
            future = self.move_executor.submit(self.plan_specialized_move, ant, arena_data)
            futures.append((ant['id'], future))
        
        # 4. –°–ë–û–† –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
        moves = []
        for ant_id, future in futures:
            try:
                path = future.result(timeout=0.5)  # –ë—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if path and len(path) > 1:
                    moves.append({
                        "ant": ant_id,
                        "path": path[1:]  # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
                    })
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {ant_id[:8]}: {e}")
        
        # 5. –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ï –†–ê–ó–†–ï–®–ï–ù–ò–ï –ö–û–ù–§–õ–ò–ö–¢–û–í
        resolved_moves = self.strategy.resolve_position_conflicts(moves, our_ants)
        
        # 6. –û–¢–ü–†–ê–í–ö–ê –ö–û–ú–ê–ù–î
        if resolved_moves:
            result = self.send_move(resolved_moves)
            if result:
                print(f"‚úÖ –î–û–ú–ò–ù–ê–¶–ò–Ø: {len(resolved_moves)} –∫–æ–º–∞–Ω–¥ | –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Ä–µ—à–µ–Ω–æ: {len(moves) - len(resolved_moves)}")
                self.strategy.moves_blocked = len(moves) - len(resolved_moves)
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥")
                return False
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        
        execution_time = time.time() - start_time
        print(f"‚ö° –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f}—Å | –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {len(resolved_moves)/max(1, len(our_ants))*100:.1f}%")
        print("=" * 60)
        
        return True
    
    def plan_specialized_move(self, ant: Dict, arena_data: Dict) -> List[Dict]:
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        ant_id = ant['id']
        ant_pos = (ant['q'], ant['r'])
        assignment = self.strategy.ant_assignments.get(ant_id, "")
        
        try:
            if "EVACUATE_MAIN_HEX" in assignment:
                return self.evacuate_from_main_hex(ant, arena_data)
            elif "DELIVER_RESOURCES" in assignment:
                return self.deliver_resources_optimized(ant, arena_data)
            elif "COLLECT_" in assignment:
                return self.collect_assigned_resource(ant, assignment, arena_data)
            elif "EXPLORE_RESOURCES" in assignment:
                return self.explore_for_resources_aggressive(ant, arena_data)
            elif "ATTACK_FORMATION" in assignment:
                return self.execute_attack_formation(ant, assignment, arena_data)
            elif "DEFEND_BASE" in assignment:
                return self.defend_base_position(ant, arena_data)
            elif "SCOUT_ZONE" in assignment:
                return self.scout_assigned_zone(ant, assignment, arena_data)
            else:
                return self.default_aggressive_move(ant, arena_data)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–ª—è {ant_id[:8]}: {e}")
            return [{'q': ant['q'], 'r': ant['r']}]
    
    def evacuate_from_main_hex(self, ant: Dict, arena_data: Dict) -> List[Dict]:
        """–ë–´–°–¢–†–ê–Ø —ç–≤–∞–∫—É–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥–µ–∫—Å–∞"""
        ant_pos = (ant['q'], ant['r'])
        home_coords = arena_data.get('home', [])
        
        # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Å–≤–æ–±–æ–¥–Ω—ã–π –≥–µ–∫—Å –¥–æ–º–∞
        for home in home_coords:
            home_pos = (home['q'], home['r'])
            if home_pos != ant_pos:
                return self.find_path_astar(ant_pos, home_pos, arena_data, max_cost=5)
        
        # –ï—Å–ª–∏ –≤—Å–µ –≥–µ–∫—Å—ã –¥–æ–º–∞ –∑–∞–Ω—è—Ç—ã, –æ—Ç—Ö–æ–¥–∏–º –Ω–∞ —Å–æ—Å–µ–¥–Ω–∏–π
        neighbors = self.get_neighbors(*ant_pos)
        if neighbors:
            return [{'q': ant_pos[0], 'r': ant_pos[1]}, {'q': neighbors[0][0], 'r': neighbors[0][1]}]
        
        return [{'q': ant['q'], 'r': ant['r']}]
    
    def collect_assigned_resource(self, ant: Dict, assignment: str, arena_data: Dict) -> List[Dict]:
        """–°–±–æ—Ä –ù–ê–ó–ù–ê–ß–ï–ù–ù–û–ì–û —Ä–µ—Å—É—Ä—Å–∞"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: "COLLECT_125_-102"
        parts = assignment.split('_')
        if len(parts) >= 3:
            try:
                target_q = int(parts[1])
                target_r = int(parts[2])
                target_pos = (target_q, target_r)
                ant_pos = (ant['q'], ant['r'])
                
                return self.find_path_astar(ant_pos, target_pos, arena_data, max_cost=10)
            except ValueError:
                pass
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –∏—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Ä–µ—Å—É—Ä—Å
        return self.explore_for_resources_aggressive(ant, arena_data)
    
    def explore_for_resources_aggressive(self, ant: Dict, arena_data: Dict) -> List[Dict]:
        """–ê–ì–†–ï–°–°–ò–í–ù–ê–Ø —Ä–∞–∑–≤–µ–¥–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        ant_pos = (ant['q'], ant['r'])
        visible_food = arena_data.get('food', [])
        
        if visible_food:
            # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –ù–ï–∑–∞–Ω—è—Ç—ã–π —Ä–µ—Å—É—Ä—Å
            available_food = []
            for food in visible_food:
                food_pos = (food['q'], food['r'])
                if food_pos not in self.strategy.resource_claims:
                    distance = self.hex_distance(ant_pos, food_pos)
                    available_food.append((food_pos, distance))
            
            if available_food:
                available_food.sort(key=lambda x: x[1])
                target_pos = available_food[0][0]
                return self.find_path_astar(ant_pos, target_pos, arena_data, max_cost=15)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤–∏–¥–∏–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤, –ê–ì–†–ï–°–°–ò–í–ù–û –∏—Å—Å–ª–µ–¥—É–µ–º
        home_coords = arena_data.get('home', [])
        if home_coords:
            home_center = home_coords[0]
            
            # –ò—Å—Å–ª–µ–¥—É–µ–º –≤ —Å–ª—É—á–∞–π–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –û–¢ –±–∞–∑—ã
            angle = random.uniform(0, 2 * 3.14159)
            distance = random.randint(8, 15)  # –î–∞–ª—å–Ω–∏–µ —Ä–∞–∑–≤–µ–¥–∫–∏
            
            target_q = int(home_center['q'] + distance * math.cos(angle))
            target_r = int(home_center['r'] + distance * math.sin(angle))
            target_pos = (target_q, target_r)
            
            return self.find_path_astar(ant_pos, target_pos, arena_data, max_cost=20)
        
        return [{'q': ant['q'], 'r': ant['r']}]
        
    def deliver_resources_optimized(self, ant: Dict, arena_data: Dict) -> List[Dict]:
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –¥–æ—Å—Ç–∞–≤–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        ant_pos = (ant['q'], ant['r'])
        home_coords = arena_data.get('home', [])
        
        if home_coords:
            # –í—ã–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–π –≥–µ–∫—Å –º—É—Ä–∞–≤–µ–π–Ω–∏–∫–∞
            closest_home = min(home_coords, 
                             key=lambda h: self.hex_distance(ant_pos, (h['q'], h['r'])))
            target_pos = (closest_home['q'], closest_home['r'])
            
            return self.find_path_astar(ant_pos, target_pos, arena_data, max_cost=10)
        
        return [{'q': ant['q'], 'r': ant['r']}]

def main_ultra_aggressive():
    """–ì–õ–ê–í–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —É–ª—å—Ç—Ä–∞-–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞"""
    print("üöÄ –ó–ê–ü–£–°–ö –£–õ–¨–¢–†–ê-–ê–ì–†–ï–°–°–ò–í–ù–û–ô –°–ò–°–¢–ï–ú–´ DOMINATION")
    print("–ö–æ–º–∞–Ω–¥–∞ MACAN team –≥–æ—Ç–æ–≤–∞ –∫ –î–û–ú–ò–ù–ò–†–û–í–ê–ù–ò–Æ!")
    print("=" * 60)
    
    client = SuperAgressiveAPIClient(use_test_server=True)
    
    try:
        turn_count = 0
        max_turns = 1000  # –õ–∏–º–∏—Ç —Ö–æ–¥–æ–≤
        
        while turn_count < max_turns:
            arena_data = client.get_arena()
            
            if not arena_data:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞—Ä–µ–Ω—ã, –ø–∞—É–∑–∞...")
                time.sleep(2)
                continue
                
            next_turn_in = arena_data.get('nextTurnIn', 0)
            if next_turn_in <= 0:
                print("üèÅ –†–ê–£–ù–î –ó–ê–í–ï–†–®–ï–ù!")
                break
            
            # –í–´–ü–û–õ–ù–Ø–ï–ú –£–õ–¨–¢–†–ê-–ê–ì–†–ï–°–°–ò–í–ù–´–ô –•–û–î
            success = client.execute_ultra_aggressive_turn()
            
            if success:
                turn_count += 1
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Ö–æ–¥–æ–≤
                if turn_count % 10 == 0:
                    ants_count = len(arena_data.get('ants', []))
                    score = arena_data.get('score', 0)
                    print(f"üìä –ü–†–û–ì–†–ï–°–°: –•–æ–¥ {turn_count} | –ê—Ä–º–∏—è: {ants_count} | –°—á–µ—Ç: {score}")
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–∞—É–∑–∞
            sleep_time = max(0.3, next_turn_in - 0.2)
            time.sleep(sleep_time)
            
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è –û–°–¢–ê–ù–û–í–ö–ê –Ω–∞ —Ö–æ–¥—É {turn_count}")
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
    finally:
        client.move_executor.shutdown(wait=True)
        print("üî• –£–õ–¨–¢–†–ê-–ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ó–ê–í–ï–†–®–ï–ù–ê")

if __name__ == "__main__":
    main_ultra_aggressive()
